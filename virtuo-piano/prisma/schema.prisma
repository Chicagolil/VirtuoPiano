// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum SourceType {
  library
  composition
  import
}

enum SongType {
  song
  scaleEx
  chordEx
  rythmEx
  arpeggioEx
}
//  earTraining,  sightReading

enum Hands {
  right
  left
  both
}



model User {
  id            String    @id @default(uuid())
  email         String    @unique
  password      String
  userName      String
  level         Int       @default(1)
  xp            Int       @default(0) // Points d'expérience
  preferences   String?
  privacyConsent Boolean  @default(false) // Consentement à la politique de confidentialité
  privacyConsentAt DateTime? // Date du consentement
  lastLoginAt   DateTime? // Dernière connexion de l'utilisateur
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  scores        Scores[]
  compositions  UsersCompositions[]
  favorites     UsersFavorites[]
  imports       UsersImports[]
  challengeProgress UserChallengeProgress[]
}

model Key {
  id      String  @id @default(uuid())
  name    String  @unique
  notes   Json
  songs   Songs[]
}

model GameMode {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  scores      Scores[]
}


model Songs {
  id             String    @id @default(uuid())
  imageUrl       String?
  title          String
  composer       String? 
  genre          String? 
  tempo          Int 
  duration_ms    Int 
  notes          Json 
  timeSignature  String
  SourceType     SourceType 
  Level          Int 
  SongType       SongType
  key_id         String 
  key            Key       @relation(fields: [key_id], references: [id])
  scores         Scores[]
  createdAt      DateTime  @default(now())
  releaseDate    DateTime?
  userCompositions UsersCompositions[]
  userFavorites  UsersFavorites[]
  userImports    UsersImports[]
}

model Scores {
  id             String    @id @default(uuid())
  correctNotes   Int?
  missedNotes    Int?
  wrongNotes     Int?
  hands          Hands?
  selectedTempo  Int? 
  totalPoints    Int? 
  maxMultiplier  Int? 
  maxCombo       Int? 
  sessionStartTime     DateTime  
  sessionEndTime       DateTime
  user_id        String
  song_id        String
  mode_id        String
  user           User      @relation(fields: [user_id], references: [id])
  song           Songs     @relation(fields: [song_id], references: [id])
  mode           GameMode  @relation(fields: [mode_id], references: [id])
}

model UsersCompositions {
  user_id        String
  song_id        String
  user           User      @relation(fields: [user_id], references: [id])
  song           Songs     @relation(fields: [song_id], references: [id])
  @@id([user_id, song_id]) 
}

model UsersFavorites {
  user_id        String
  song_id        String
  user           User      @relation(fields: [user_id], references: [id])
  song           Songs     @relation(fields: [song_id], references: [id])
  @@id([user_id, song_id]) 
}

model UsersImports {
  user_id        String
  song_id        String
  user           User      @relation(fields: [user_id], references: [id])
  song           Songs     @relation(fields: [song_id], references: [id])
  @@id([user_id, song_id]) 
}

// Modèles pour le système de défis et niveaux
model Challenge {
  id          String    @id @default(uuid())
  name        String
  description String
  category    String   
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  levels      ChallengeLevel[]
  userProgress UserChallengeProgress[]
}

model ChallengeLevel {
  id          String    @id @default(uuid())
  challengeId String
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  level       Int       
  name        String    
  description String
  requirement Int       
  requirementType String 
  requirementFilter Json? 
  reward      Json?     
  isUnlocked  Boolean   @default(false) 
  unlockCondition Json? 
  autoReward  Boolean   @default(false) 
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userProgress UserChallengeProgress[]
  
  @@unique([challengeId, level])
}

model UserChallengeProgress {
  id              String          @id @default(uuid())
  userId          String
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  challengeId     String
  challenge       Challenge       @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  levelId         String
  level           ChallengeLevel  @relation(fields: [levelId], references: [id], onDelete: Cascade)
  currentProgress Int             @default(0)
  isCompleted     Boolean         @default(false)
  completedAt     DateTime?
  isRewardClaimed Boolean         @default(false) 
  claimedAt       DateTime?       
  startedAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  @@unique([userId, challengeId, levelId])
}


