#!/usr/bin/env node

import { AccountServices } from '../../src/lib/services/account-services';
import { EmailService } from '../../src/lib/services/email-service';
import prisma from '../../src/lib/prisma';

/**
 * Script de maintenance pour g√©rer les comptes inactifs
 *
 * Ce script peut √™tre ex√©cut√© manuellement ou via un cron job
 * pour automatiser la gestion des comptes inactifs.
 */

async function sendWarningEmails() {
  console.log("üîî Envoi des emails d'avertissement...");

  try {
    // R√©cup√©rer les utilisateurs qui seront supprim√©s dans 2 semaines
    // (donc inactifs depuis 11 mois et 2 semaines)
    const elevenMonthsTwoWeeksAgo = new Date();
    elevenMonthsTwoWeeksAgo.setMonth(elevenMonthsTwoWeeksAgo.getMonth() - 11);
    elevenMonthsTwoWeeksAgo.setDate(elevenMonthsTwoWeeksAgo.getDate() - 14);

    const usersToWarn = await prisma.user.findMany({
      where: {
        OR: [
          {
            lastLoginAt: {
              lt: elevenMonthsTwoWeeksAgo,
            },
          },
          {
            lastLoginAt: null,
            createdAt: {
              lt: elevenMonthsTwoWeeksAgo,
            },
          },
        ],
      },
      select: {
        id: true,
        email: true,
        userName: true,
        lastLoginAt: true,
      },
    });

    console.log(`üìß ${usersToWarn.length} utilisateurs √† avertir`);

    let sentCount = 0;
    let errorCount = 0;

    for (const user of usersToWarn) {
      try {
        const emailSent = await EmailService.sendInactiveAccountWarning(
          user.email,
          user.userName,
          user.lastLoginAt
        );

        if (emailSent) {
          console.log(`‚úÖ Email d'avertissement envoy√© √† ${user.email}`);
          sentCount++;
        } else {
          console.log(`‚ùå √âchec de l'envoi √† ${user.email}`);
          errorCount++;
        }
      } catch (error) {
        console.error(`‚ùå Erreur lors de l'envoi √† ${user.email}:`, error);
        errorCount++;
      }
    }

    console.log(
      `üìä R√©sum√©: ${sentCount} emails envoy√©s, ${errorCount} erreurs`
    );
    return { sentCount, errorCount, totalUsers: usersToWarn.length };
  } catch (error) {
    console.error(
      "‚ùå Erreur lors de l'envoi des emails d'avertissement:",
      error
    );
    throw error;
  }
}

async function deleteInactiveAccounts() {
  console.log('üóëÔ∏è Suppression des comptes inactifs...');

  try {
    // R√©cup√©rer les utilisateurs √† supprimer AVANT de les supprimer
    const usersToDelete = await AccountServices.getUsersToDelete();

    if (
      !usersToDelete.success ||
      !usersToDelete.data ||
      usersToDelete.data.length === 0
    ) {
      console.log('‚úÖ Aucun utilisateur inactif √† supprimer');
      return { success: true, deletedCount: 0 };
    }

    // Supprimer les utilisateurs
    const result = await AccountServices.deleteInactiveUsers();

    if (result.success) {
      console.log(`‚úÖ ${result.deletedCount} comptes supprim√©s avec succ√®s`);

      // Envoyer des emails de notification de suppression
      let notificationSentCount = 0;

      for (const userData of usersToDelete.data) {
        try {
          await EmailService.sendAccountDeletionNotification(
            userData.email,
            userData.userName
          );
          console.log(`üìß Email de suppression envoy√© √† ${userData.email}`);
          notificationSentCount++;
        } catch (error) {
          console.error(
            `‚ùå Erreur lors de l'envoi de l'email de suppression √† ${userData.email}:`,
            error
          );
        }
      }

      console.log(`üìä ${notificationSentCount} emails de notification envoy√©s`);
    } else {
      console.log(`‚ùå Erreur lors de la suppression: ${result.message}`);
    }

    return result;
  } catch (error) {
    console.error(
      '‚ùå Erreur lors de la suppression des comptes inactifs:',
      error
    );
    throw error;
  }
}

async function generateInactiveUsersReport() {
  console.log('üìä G√©n√©ration du rapport des utilisateurs inactifs...');

  try {
    const result = await AccountServices.getInactiveUsers();

    if (result.success && result.data) {
      console.log(`üìà ${result.data.length} utilisateurs inactifs trouv√©s`);

      // Afficher les d√©tails
      result.data.forEach((user, index) => {
        const lastLogin = user.lastLoginAt
          ? user.lastLoginAt.toLocaleDateString('fr-FR')
          : 'Jamais connect√©';

        console.log(
          `${index + 1}. ${user.userName} (${
            user.email
          }) - Derni√®re connexion: ${lastLogin}`
        );
      });
    } else {
      console.log('‚ùå Erreur lors de la g√©n√©ration du rapport');
    }

    return result;
  } catch (error) {
    console.error('‚ùå Erreur lors de la g√©n√©ration du rapport:', error);
    throw error;
  }
}

async function main() {
  const command = process.argv[2];

  console.log('üîß Script de maintenance Virtuo Piano');
  console.log('=====================================');

  try {
    switch (command) {
      case 'warn':
        await sendWarningEmails();
        break;

      case 'delete':
        await deleteInactiveAccounts();
        break;

      case 'report':
        await generateInactiveUsersReport();
        break;

      case 'full':
        console.log('üîÑ Ex√©cution compl√®te du processus de maintenance...');
        await sendWarningEmails();
        await deleteInactiveAccounts();
        break;

      default:
        console.log(`
Usage: npm run maintenance <command>

Commandes disponibles:
  warn    - Envoyer les emails d'avertissement aux utilisateurs inactifs
  delete  - Supprimer les comptes inactifs depuis 1 an
  report  - G√©n√©rer un rapport des utilisateurs inactifs
  full    - Ex√©cuter le processus complet (warn + delete)

Exemples:
  npm run maintenance warn
  npm run maintenance delete
  npm run maintenance report
  npm run maintenance full
        `);
        break;
    }
  } catch (error) {
    console.error('‚ùå Erreur fatale:', error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
    console.log('‚úÖ Script termin√©');
  }
}

// Ex√©cuter le script
main();

export {
  sendWarningEmails,
  deleteInactiveAccounts,
  generateInactiveUsersReport,
};
