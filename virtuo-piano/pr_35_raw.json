[
  {
    "sha": "da044d4f07fbcc86456db4d5bf0e935b8a2e9921",
    "filename": "node_modules/.vite/vitest/da39a3ee5e6b4b0d3255bfef95601890afd80709/results.json",
    "status": "removed",
    "additions": 0,
    "deletions": 1,
    "changes": 1,
    "blob_url": "https://github.com/Tfe-VirtuoPiano/www/blob/d44b38c051f6c27559cc79fc7f0c4e68fdfb8d0e/node_modules%2F.vite%2Fvitest%2Fda39a3ee5e6b4b0d3255bfef95601890afd80709%2Fresults.json",
    "raw_url": "https://github.com/Tfe-VirtuoPiano/www/raw/d44b38c051f6c27559cc79fc7f0c4e68fdfb8d0e/node_modules%2F.vite%2Fvitest%2Fda39a3ee5e6b4b0d3255bfef95601890afd80709%2Fresults.json",
    "contents_url": "https://api.github.com/repos/Tfe-VirtuoPiano/www/contents/node_modules%2F.vite%2Fvitest%2Fda39a3ee5e6b4b0d3255bfef95601890afd80709%2Fresults.json?ref=d44b38c051f6c27559cc79fc7f0c4e68fdfb8d0e",
    "patch": "@@ -1 +0,0 @@\n-{\"version\":\"3.2.4\",\"results\":[[\":virtuo-piano/tests/components/AccuracyBadge.test.tsx\",{\"duration\":0,\"failed\":true}]]}\n\\ No newline at end of file"
  },
  {
    "sha": "8cc80e35727ed41802876a73f68897faea5ff171",
    "filename": "virtuo-piano/package-lock.json",
    "status": "modified",
    "additions": 51,
    "deletions": 0,
    "changes": 51,
    "blob_url": "https://github.com/Tfe-VirtuoPiano/www/blob/f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33/virtuo-piano%2Fpackage-lock.json",
    "raw_url": "https://github.com/Tfe-VirtuoPiano/www/raw/f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33/virtuo-piano%2Fpackage-lock.json",
    "contents_url": "https://api.github.com/repos/Tfe-VirtuoPiano/www/contents/virtuo-piano%2Fpackage-lock.json?ref=f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33",
    "patch": "@@ -21,6 +21,8 @@\n         \"@radix-ui/react-slot\": \"^1.2.0\",\n         \"@radix-ui/react-tabs\": \"^1.1.4\",\n         \"@tabler/icons-react\": \"^3.31.0\",\n+        \"@tanstack/react-query\": \"^5.83.0\",\n+        \"@tanstack/react-query-devtools\": \"^5.83.0\",\n         \"@testing-library/jest-dom\": \"^6.6.3\",\n         \"@testing-library/react\": \"^16.3.0\",\n         \"@tippyjs/react\": \"^4.2.6\",\n@@ -3477,6 +3479,55 @@\n         \"tailwindcss\": \"4.1.3\"\n       }\n     },\n+    \"node_modules/@tanstack/query-core\": {\n+      \"version\": \"5.83.0\",\n+      \"resolved\": \"https://registry.npmjs.org/@tanstack/query-core/-/query-core-5.83.0.tgz\",\n+      \"integrity\": \"sha512-0M8dA+amXUkyz5cVUm/B+zSk3xkQAcuXuz5/Q/LveT4ots2rBpPTZOzd7yJa2Utsf8D2Upl5KyjhHRY+9lB/XA==\",\n+      \"funding\": {\n+        \"type\": \"github\",\n+        \"url\": \"https://github.com/sponsors/tannerlinsley\"\n+      }\n+    },\n+    \"node_modules/@tanstack/query-devtools\": {\n+      \"version\": \"5.81.2\",\n+      \"resolved\": \"https://registry.npmjs.org/@tanstack/query-devtools/-/query-devtools-5.81.2.tgz\",\n+      \"integrity\": \"sha512-jCeJcDCwKfoyyBXjXe9+Lo8aTkavygHHsUHAlxQKKaDeyT0qyQNLKl7+UyqYH2dDF6UN/14873IPBHchcsU+Zg==\",\n+      \"funding\": {\n+        \"type\": \"github\",\n+        \"url\": \"https://github.com/sponsors/tannerlinsley\"\n+      }\n+    },\n+    \"node_modules/@tanstack/react-query\": {\n+      \"version\": \"5.83.0\",\n+      \"resolved\": \"https://registry.npmjs.org/@tanstack/react-query/-/react-query-5.83.0.tgz\",\n+      \"integrity\": \"sha512-/XGYhZ3foc5H0VM2jLSD/NyBRIOK4q9kfeml4+0x2DlL6xVuAcVEW+hTlTapAmejObg0i3eNqhkr2dT+eciwoQ==\",\n+      \"dependencies\": {\n+        \"@tanstack/query-core\": \"5.83.0\"\n+      },\n+      \"funding\": {\n+        \"type\": \"github\",\n+        \"url\": \"https://github.com/sponsors/tannerlinsley\"\n+      },\n+      \"peerDependencies\": {\n+        \"react\": \"^18 || ^19\"\n+      }\n+    },\n+    \"node_modules/@tanstack/react-query-devtools\": {\n+      \"version\": \"5.83.0\",\n+      \"resolved\": \"https://registry.npmjs.org/@tanstack/react-query-devtools/-/react-query-devtools-5.83.0.tgz\",\n+      \"integrity\": \"sha512-yfp8Uqd3I1jgx8gl0lxbSSESu5y4MO2ThOPBnGNTYs0P+ZFu+E9g5IdOngyUGuo6Uz6Qa7p9TLdZEX3ntik2fQ==\",\n+      \"dependencies\": {\n+        \"@tanstack/query-devtools\": \"5.81.2\"\n+      },\n+      \"funding\": {\n+        \"type\": \"github\",\n+        \"url\": \"https://github.com/sponsors/tannerlinsley\"\n+      },\n+      \"peerDependencies\": {\n+        \"@tanstack/react-query\": \"^5.83.0\",\n+        \"react\": \"^18 || ^19\"\n+      }\n+    },\n     \"node_modules/@testing-library/dom\": {\n       \"version\": \"10.4.0\",\n       \"resolved\": \"https://registry.npmjs.org/@testing-library/dom/-/dom-10.4.0.tgz\","
  },
  {
    "sha": "a38525bc432e1d5a7a0d2703dc72f1d47681b9db",
    "filename": "virtuo-piano/package.json",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/Tfe-VirtuoPiano/www/blob/f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33/virtuo-piano%2Fpackage.json",
    "raw_url": "https://github.com/Tfe-VirtuoPiano/www/raw/f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33/virtuo-piano%2Fpackage.json",
    "contents_url": "https://api.github.com/repos/Tfe-VirtuoPiano/www/contents/virtuo-piano%2Fpackage.json?ref=f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33",
    "patch": "@@ -38,6 +38,8 @@\n     \"@radix-ui/react-slot\": \"^1.2.0\",\n     \"@radix-ui/react-tabs\": \"^1.1.4\",\n     \"@tabler/icons-react\": \"^3.31.0\",\n+    \"@tanstack/react-query\": \"^5.83.0\",\n+    \"@tanstack/react-query-devtools\": \"^5.83.0\",\n     \"@testing-library/jest-dom\": \"^6.6.3\",\n     \"@testing-library/react\": \"^16.3.0\",\n     \"@tippyjs/react\": \"^4.2.6\","
  },
  {
    "sha": "949136d6a97ac48ac3f10123ec8ff071f20994ab",
    "filename": "virtuo-piano/prisma/seed/seeders/scores.ts",
    "status": "modified",
    "additions": 119,
    "deletions": 1,
    "changes": 120,
    "blob_url": "https://github.com/Tfe-VirtuoPiano/www/blob/f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33/virtuo-piano%2Fprisma%2Fseed%2Fseeders%2Fscores.ts",
    "raw_url": "https://github.com/Tfe-VirtuoPiano/www/raw/f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33/virtuo-piano%2Fprisma%2Fseed%2Fseeders%2Fscores.ts",
    "contents_url": "https://api.github.com/repos/Tfe-VirtuoPiano/www/contents/virtuo-piano%2Fprisma%2Fseed%2Fseeders%2Fscores.ts?ref=f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33",
    "patch": "@@ -19,7 +19,125 @@ export const seedScores = async (prisma: PrismaClient) => {\n     throw new Error('Aucun mode de jeu trouvé');\n   }\n \n-  for (let i = 0; i < 1000; i++) {\n+  // Trouver Chicagolil et sa chanson\n+  const chicagolil = await prisma.user.findUnique({\n+    where: { email: 'ldevroye@gmail.com' },\n+  });\n+\n+  const chicagolilSong = await prisma.songs.findFirst({\n+    where: { composer: 'Chicagolil' },\n+  });\n+\n+  if (!chicagolil) {\n+    throw new Error('Utilisateur Chicagolil non trouvé');\n+  }\n+\n+  if (!chicagolilSong) {\n+    throw new Error('Chanson de Chicagolil non trouvée');\n+  }\n+\n+  // Générer des sessions pour Chicagolil et sa chanson (plus de données)\n+  const chicagolilSessionsCount = 120; // 120 sessions pour Chicagolil (plus étalées)\n+  const otherSessionsCount = 1000; // 1000 sessions pour les autres\n+\n+  // Sessions pour Chicagolil et sa chanson\n+  for (let i = 0; i < chicagolilSessionsCount; i++) {\n+    const gameMode = faker.helpers.arrayElement(gameModes);\n+    const notesArray = chicagolilSong.notes as any[];\n+\n+    // Générer des dates étalées sur 12 mois pour Chicagolil\n+    const monthsAgo = faker.number.int({ min: 0, max: 12 });\n+    const daysAgo = faker.number.int({ min: 0, max: 30 });\n+    const sessionStartTime = new Date();\n+    sessionStartTime.setMonth(sessionStartTime.getMonth() - monthsAgo);\n+    sessionStartTime.setDate(sessionStartTime.getDate() - daysAgo);\n+    sessionStartTime.setHours(\n+      faker.number.int({ min: 8, max: 22 }),\n+      faker.number.int({ min: 0, max: 59 }),\n+      0,\n+      0\n+    );\n+\n+    const sessionDuration = faker.number.int({ min: 15, max: 45 }) * 60 * 1000;\n+    const sessionEndTime = new Date(\n+      sessionStartTime.getTime() + sessionDuration\n+    );\n+\n+    // Logique différente selon le mode de jeu\n+    const isGameMode = gameMode.name === 'Jeu';\n+    const isLearningMode = gameMode.name === 'Apprentissage';\n+\n+    const scoreData = {\n+      user_id: chicagolil.id,\n+      song_id: chicagolilSong.id,\n+      mode_id: gameMode.id,\n+      sessionStartTime: sessionStartTime,\n+      sessionEndTime: sessionEndTime,\n+    };\n+\n+    // Calculer la progression basée sur la date (plus récent = meilleur)\n+    const monthsFromNow =\n+      (new Date().getTime() - sessionStartTime.getTime()) /\n+      (1000 * 60 * 60 * 24 * 30);\n+    const progressFactor = Math.max(0, 1 - monthsFromNow / 12); // 0 = il y a 12 mois, 1 = maintenant\n+\n+    if (isGameMode) {\n+      // Mode Jeu : hands, correctNotes, missedNotes, wrongNotes, selectedTempo sont null\n+      const baseScore = 3000 + progressFactor * 7000; // 3000-10000 selon la progression\n+      const baseMultiplier = 1 + progressFactor * 9; // 1-10 selon la progression\n+      const baseCombo = 5 + progressFactor * (notesArray.length - 5); // 5-max selon la progression\n+\n+      Object.assign(scoreData, {\n+        hands: null,\n+        correctNotes: null,\n+        missedNotes: null,\n+        wrongNotes: null,\n+        selectedTempo: null,\n+        totalPoints: Math.round(\n+          baseScore + faker.number.int({ min: -500, max: 500 })\n+        ), // Variation autour de la progression\n+        maxMultiplier: Math.round(\n+          baseMultiplier + faker.number.float({ min: -0.5, max: 0.5 })\n+        ),\n+        maxCombo: Math.round(\n+          baseCombo + faker.number.int({ min: -10, max: 10 })\n+        ),\n+      });\n+    } else if (isLearningMode) {\n+      // Mode Apprentissage : totalPoints, maxMultiplier, maxCombo sont null\n+      const baseCorrectNotes = Math.max(\n+        5,\n+        Math.round(progressFactor * notesArray.length)\n+      );\n+      const baseWrongNotes = Math.max(0, Math.round((1 - progressFactor) * 8)); // Moins d'erreurs avec le temps\n+      const baseMissedNotes = Math.max(0, Math.round((1 - progressFactor) * 5)); // Moins de notes manquées avec le temps\n+      const baseTempo = 60 + progressFactor * 100; // 60-160 selon la progression\n+\n+      Object.assign(scoreData, {\n+        correctNotes: Math.round(\n+          baseCorrectNotes + faker.number.int({ min: -2, max: 2 })\n+        ),\n+        wrongNotes: Math.round(\n+          baseWrongNotes + faker.number.int({ min: -1, max: 1 })\n+        ),\n+        missedNotes: Math.round(\n+          baseMissedNotes + faker.number.int({ min: -1, max: 1 })\n+        ),\n+        hands: faker.helpers.arrayElement(Object.values(Hands)),\n+        selectedTempo: Math.round(\n+          baseTempo + faker.number.int({ min: -10, max: 10 })\n+        ),\n+        totalPoints: null,\n+        maxMultiplier: null,\n+        maxCombo: null,\n+      });\n+    }\n+\n+    scores.push(scoreData);\n+  }\n+\n+  // Générer les autres sessions (pour tous les utilisateurs et chansons)\n+  for (let i = 0; i < otherSessionsCount; i++) {\n     const user = faker.helpers.arrayElement(users);\n     const song = faker.helpers.arrayElement(songs);\n     const gameMode = faker.helpers.arrayElement(gameModes);"
  },
  {
    "sha": "68fdce1dd8b705f509bb66c03ad80e1255087219",
    "filename": "virtuo-piano/src/app/(dashboard)/performances/[id]/page.tsx",
    "status": "added",
    "additions": 56,
    "deletions": 0,
    "changes": 56,
    "blob_url": "https://github.com/Tfe-VirtuoPiano/www/blob/f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33/virtuo-piano%2Fsrc%2Fapp%2F(dashboard)%2Fperformances%2F%5Bid%5D%2Fpage.tsx",
    "raw_url": "https://github.com/Tfe-VirtuoPiano/www/raw/f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33/virtuo-piano%2Fsrc%2Fapp%2F(dashboard)%2Fperformances%2F%5Bid%5D%2Fpage.tsx",
    "contents_url": "https://api.github.com/repos/Tfe-VirtuoPiano/www/contents/virtuo-piano%2Fsrc%2Fapp%2F(dashboard)%2Fperformances%2F%5Bid%5D%2Fpage.tsx?ref=f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33",
    "patch": "@@ -0,0 +1,56 @@\n+import { Spinner } from '@/components/ui/spinner';\n+import SongPerformances from '@/features/performances/SongPerformances';\n+import { getSongBasicDataAction } from '@/lib/actions/PerformanceSong-actions';\n+import { authOptions } from '@/lib/authoption';\n+import { getServerSession } from 'next-auth';\n+import { Suspense } from 'react';\n+\n+async function LoadSong({ id }: { id: string }) {\n+  const song = await getSongBasicDataAction(id);\n+\n+  if (!song.success) {\n+    return (\n+      <div>\n+        <h1>Chanson non trouvée</h1>\n+        <p>La chanson que vous recherchez n'existe pas ou a été supprimée.</p>\n+      </div>\n+    );\n+  }\n+\n+  return <SongPerformances song={song.data} />;\n+}\n+\n+export default async function SongPage({\n+  params,\n+}: {\n+  params: Promise<{ id: string }>;\n+}) {\n+  const { id } = await params;\n+  const session = await getServerSession(authOptions);\n+  const userId = session?.user?.id;\n+\n+  if (!userId) {\n+    return (\n+      <div>\n+        <h1>Vous devez être connecté pour accéder à cette page</h1>\n+      </div>\n+    );\n+  }\n+\n+  return (\n+    <div>\n+      <Suspense\n+        fallback={\n+          <div className=\"flex justify-center items-center h-64\">\n+            <div className=\"flex flex-col items-center\">\n+              <p className=\"text-white\">Chargement de la chanson...</p>\n+              <Spinner variant=\"bars\" size={32} className=\"text-white\" />\n+            </div>\n+          </div>\n+        }\n+      >\n+        <LoadSong id={id} />\n+      </Suspense>\n+    </div>\n+  );\n+}"
  },
  {
    "sha": "33fcde73616e85f898a6167026f090821e08f591",
    "filename": "virtuo-piano/src/app/(dashboard)/performances/page.tsx",
    "status": "modified",
    "additions": 26,
    "deletions": 2,
    "changes": 28,
    "blob_url": "https://github.com/Tfe-VirtuoPiano/www/blob/f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33/virtuo-piano%2Fsrc%2Fapp%2F(dashboard)%2Fperformances%2Fpage.tsx",
    "raw_url": "https://github.com/Tfe-VirtuoPiano/www/raw/f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33/virtuo-piano%2Fsrc%2Fapp%2F(dashboard)%2Fperformances%2Fpage.tsx",
    "contents_url": "https://api.github.com/repos/Tfe-VirtuoPiano/www/contents/virtuo-piano%2Fsrc%2Fapp%2F(dashboard)%2Fperformances%2Fpage.tsx?ref=f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33",
    "patch": "@@ -1,6 +1,7 @@\n 'use client';\n \n-import React, { useState, Suspense, lazy } from 'react';\n+import React, { useState, Suspense, lazy, useEffect } from 'react';\n+import { useSearchParams } from 'next/navigation';\n import { Spinner } from '@/components/ui/spinner';\n import * as Tabs from '@radix-ui/react-tabs';\n import { IconChartBar } from '@tabler/icons-react';\n@@ -10,8 +11,17 @@ const GeneralStats = lazy(() => import('@/features/performances/generalStats'));\n const HistoryStats = lazy(() => import('@/features/performances/HistoryStats'));\n const PlayedSongs = lazy(() => import('@/features/performances/PlayedSongs'));\n \n-export default function PerformancesPage() {\n+// Composant séparé pour gérer useSearchParams\n+function PerformancesContent() {\n   const [activeTab, setActiveTab] = useState('overview');\n+  const searchParams = useSearchParams();\n+\n+  useEffect(() => {\n+    const initialTab = searchParams.get('tab');\n+    if (initialTab) {\n+      setActiveTab(initialTab);\n+    }\n+  }, [searchParams]);\n \n   return (\n     <div className=\"w-full p-4 pt-7\">\n@@ -107,3 +117,17 @@ export default function PerformancesPage() {\n     </div>\n   );\n }\n+\n+export default function PerformancesPage() {\n+  return (\n+    <Suspense\n+      fallback={\n+        <div className=\"flex justify-center items-center h-screen\">\n+          <Spinner variant=\"bars\" size={32} className=\"text-white\" />\n+        </div>\n+      }\n+    >\n+      <PerformancesContent />\n+    </Suspense>\n+  );\n+}"
  },
  {
    "sha": "00647ff648a04166aa73157038206673c57c0307",
    "filename": "virtuo-piano/src/app/globals.css",
    "status": "modified",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/Tfe-VirtuoPiano/www/blob/f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33/virtuo-piano%2Fsrc%2Fapp%2Fglobals.css",
    "raw_url": "https://github.com/Tfe-VirtuoPiano/www/raw/f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33/virtuo-piano%2Fsrc%2Fapp%2Fglobals.css",
    "contents_url": "https://api.github.com/repos/Tfe-VirtuoPiano/www/contents/virtuo-piano%2Fsrc%2Fapp%2Fglobals.css?ref=f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33",
    "patch": "@@ -261,6 +261,12 @@ body {\n   }\n }\n \n+@layer utilities {\n+  .animate-timeline-bubble {\n+    @apply transition-all duration-500 ease-out;\n+  }\n+}\n+\n @keyframes aurora {\n   0% {\n     background-position: 50% 50%, 50% 50%;"
  },
  {
    "sha": "d7875664e588ddefa01ecb07dd538030e3171901",
    "filename": "virtuo-piano/src/app/landingPage/page.tsx",
    "status": "modified",
    "additions": 5,
    "deletions": 5,
    "changes": 10,
    "blob_url": "https://github.com/Tfe-VirtuoPiano/www/blob/f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33/virtuo-piano%2Fsrc%2Fapp%2FlandingPage%2Fpage.tsx",
    "raw_url": "https://github.com/Tfe-VirtuoPiano/www/raw/f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33/virtuo-piano%2Fsrc%2Fapp%2FlandingPage%2Fpage.tsx",
    "contents_url": "https://api.github.com/repos/Tfe-VirtuoPiano/www/contents/virtuo-piano%2Fsrc%2Fapp%2FlandingPage%2Fpage.tsx?ref=f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33",
    "patch": "@@ -21,7 +21,7 @@ export default function LandingPage() {\n           icon={<FileMusic size={45} />}\n           href=\"/library\"\n           pixelProps={{\n-            colors: ['#e0f2fe', '#7dd3fc', '#0ea5e9', '#fef08a', '#fde047'],\n+            colors: ['#3b82f6', '#60a5fa', '#fb923c'], // bleu moyen, bleu clair, orange moyen\n             gap: 10,\n             speed: 25,\n           }}\n@@ -32,7 +32,7 @@ export default function LandingPage() {\n           icon={<Medal size={45} />}\n           href=\"/leaderboard\"\n           pixelProps={{\n-            colors: ['#e0f2fe', '#7dd3fc', '#0ea5e9', '#fef08a', '#fde047'],\n+            colors: ['#60a5fa', '#3b82f6', '#fb923c'], // bleu clair, bleu moyen, orange moyen\n             gap: 10,\n             speed: 25,\n           }}\n@@ -43,7 +43,7 @@ export default function LandingPage() {\n           icon={<ChartLine size={45} />}\n           href=\"/performances\"\n           pixelProps={{\n-            colors: ['#e0f2fe', '#7dd3fc', '#0ea5e9', '#fef08a', '#fde047'],\n+            colors: ['#3b82f6', '#fb923c', '#60a5fa'], // bleu moyen, orange moyen, bleu clair\n             gap: 10,\n             speed: 25,\n           }}\n@@ -54,7 +54,7 @@ export default function LandingPage() {\n           icon={<Star size={45} />}\n           href=\"/favorites\"\n           pixelProps={{\n-            colors: ['#e0f2fe', '#7dd3fc', '#0ea5e9', '#fef08a', '#fde047'],\n+            colors: ['#fb923c', '#3b82f6', '#60a5fa'], // orange moyen, bleu moyen, bleu clair\n             gap: 10,\n             speed: 25,\n           }}\n@@ -65,7 +65,7 @@ export default function LandingPage() {\n           icon={<FolderUp size={45} />}\n           href=\"/imports\"\n           pixelProps={{\n-            colors: ['#e0f2fe', '#7dd3fc', '#0ea5e9', '#fef08a', '#fde047'],\n+            colors: ['#60a5fa', '#fb923c', '#3b82f6'], // bleu clair, orange moyen, bleu moyen\n             gap: 10,\n             speed: 25,\n           }}"
  },
  {
    "sha": "2e322ad028747b726de98a588fff00b4394688e0",
    "filename": "virtuo-piano/src/app/layout.tsx",
    "status": "modified",
    "additions": 11,
    "deletions": 8,
    "changes": 19,
    "blob_url": "https://github.com/Tfe-VirtuoPiano/www/blob/f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33/virtuo-piano%2Fsrc%2Fapp%2Flayout.tsx",
    "raw_url": "https://github.com/Tfe-VirtuoPiano/www/raw/f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33/virtuo-piano%2Fsrc%2Fapp%2Flayout.tsx",
    "contents_url": "https://api.github.com/repos/Tfe-VirtuoPiano/www/contents/virtuo-piano%2Fsrc%2Fapp%2Flayout.tsx?ref=f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33",
    "patch": "@@ -4,6 +4,7 @@ import './globals.css';\n import { AuroraBackground } from '@/components/ui/aurora-background';\n import { Toaster } from 'react-hot-toast';\n import { SongProvider } from '@/contexts/SongContext';\n+import QueryProvider from '@/lib/providers/QueryProvider';\n \n const inter = Inter({ subsets: ['latin'] });\n \n@@ -20,14 +21,16 @@ export default function RootLayout({\n   return (\n     <html lang=\"fr\">\n       <body className={inter.className}>\n-        <SongProvider>\n-          <AuroraBackground>\n-            <div className=\"relative min-h-screen\">\n-              <div className=\"relative z-10\">{children}</div>\n-            </div>\n-          </AuroraBackground>\n-          <Toaster position=\"top-right\" />\n-        </SongProvider>\n+        <QueryProvider>\n+          <SongProvider>\n+            <AuroraBackground>\n+              <div className=\"relative min-h-screen\">\n+                <div className=\"relative z-10\">{children}</div>\n+              </div>\n+            </AuroraBackground>\n+            <Toaster position=\"top-right\" />\n+          </SongProvider>\n+        </QueryProvider>\n       </body>\n     </html>\n   );"
  },
  {
    "sha": "35a250dcd4383a78112714a00a642c7bd0ac1b0b",
    "filename": "virtuo-piano/src/common/utils/function.ts",
    "status": "modified",
    "additions": 20,
    "deletions": 12,
    "changes": 32,
    "blob_url": "https://github.com/Tfe-VirtuoPiano/www/blob/f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33/virtuo-piano%2Fsrc%2Fcommon%2Futils%2Ffunction.ts",
    "raw_url": "https://github.com/Tfe-VirtuoPiano/www/raw/f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33/virtuo-piano%2Fsrc%2Fcommon%2Futils%2Ffunction.ts",
    "contents_url": "https://api.github.com/repos/Tfe-VirtuoPiano/www/contents/virtuo-piano%2Fsrc%2Fcommon%2Futils%2Ffunction.ts?ref=f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33",
    "patch": "@@ -2,7 +2,7 @@ import { DIFFICULTY_RANGES } from '../constants/Difficulties';\n import { DifficultyRange } from '../types/songs';\n import { SONG_TYPE_RANGE } from '../constants/SongTypes';\n import { SongTypeRange } from '../types/songs';\n-import { ScoreDurationData } from '@/lib/services/performances-services';\n+import { ScoreDurationData } from '@/lib/types';\n import { MONTH_NAMES } from '../constants/heatmaps';\n \n export function getDifficultyRange(difficulty: number) {\n@@ -50,18 +50,26 @@ export const getLearnScores = (\n };\n \n // Fonction pour formater la durée (utilisée dans le titre et les cartes)\n-export const formatDuration = (minutes: number) => {\n-  if (minutes < 60) {\n-    return `${minutes} minute${minutes !== 1 ? 's' : ''}`;\n-  }\n-  const hours = Math.floor(minutes / 60);\n-  const remainingMinutes = minutes % 60;\n-  if (remainingMinutes === 0) {\n-    return `${hours} heure${hours !== 1 ? 's' : ''}`;\n+export const formatDuration = (minutes: number, court: boolean = false) => {\n+  if (court) {\n+    if (minutes < 60) return `${minutes}min`;\n+    const hours = Math.floor(minutes / 60);\n+    const remainingMinutes = minutes % 60;\n+    if (remainingMinutes === 0) return `${hours}h`;\n+    return `${hours}h${remainingMinutes}`;\n+  } else {\n+    if (minutes < 60) {\n+      return `${minutes} minute${minutes !== 1 ? 's' : ''}`;\n+    }\n+    const hours = Math.floor(minutes / 60);\n+    const remainingMinutes = minutes % 60;\n+    if (remainingMinutes === 0) {\n+      return `${hours} heure${hours !== 1 ? 's' : ''}`;\n+    }\n+    return `${hours} heure${hours !== 1 ? 's' : ''} ${remainingMinutes} minute${\n+      remainingMinutes !== 1 ? 's' : ''\n+    }`;\n   }\n-  return `${hours} heure${hours !== 1 ? 's' : ''} ${remainingMinutes} minute${\n-    remainingMinutes !== 1 ? 's' : ''\n-  }`;\n };\n \n // Type pour une semaine de contributions (7 jours)"
  },
  {
    "sha": "1e56576f21e8c65e181349d367cb30c376af2d52",
    "filename": "virtuo-piano/src/components/cards/PieChartCard.tsx",
    "status": "modified",
    "additions": 7,
    "deletions": 1,
    "changes": 8,
    "blob_url": "https://github.com/Tfe-VirtuoPiano/www/blob/f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33/virtuo-piano%2Fsrc%2Fcomponents%2Fcards%2FPieChartCard.tsx",
    "raw_url": "https://github.com/Tfe-VirtuoPiano/www/raw/f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33/virtuo-piano%2Fsrc%2Fcomponents%2Fcards%2FPieChartCard.tsx",
    "contents_url": "https://api.github.com/repos/Tfe-VirtuoPiano/www/contents/virtuo-piano%2Fsrc%2Fcomponents%2Fcards%2FPieChartCard.tsx?ref=f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33",
    "patch": "@@ -188,6 +188,12 @@ export function PieChartCard({\n           <div className=\"mt-2 text-sm text-red-400\">\n             Erreur lors du chargement des données\n           </div>\n+        ) : data.length === 0 ? (\n+          <div className=\"flex items-center justify-center text-center\">\n+            <span className=\"text-sm text-white/70\">\n+              Aucune donnée disponible\n+            </span>\n+          </div>\n         ) : (\n           <div style={{ height: `${height}px`, width: '100%' }}>\n             <Pie data={chartData} options={options} />\n@@ -196,7 +202,7 @@ export function PieChartCard({\n       </div>\n \n       <div className=\"mt-2 grid grid-cols-2 gap-1\">\n-        {error\n+        {error || data.length === 0\n           ? ''\n           : processedData.map((category, index) => (\n               <div key={index} className=\"flex items-center space-x-1.5\">"
  },
  {
    "sha": "a1e8217e057069e3f6037fdf13a9ed85eb3293f8",
    "filename": "virtuo-piano/src/components/cards/ScoreCard.tsx",
    "status": "modified",
    "additions": 27,
    "deletions": 1,
    "changes": 28,
    "blob_url": "https://github.com/Tfe-VirtuoPiano/www/blob/f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33/virtuo-piano%2Fsrc%2Fcomponents%2Fcards%2FScoreCard.tsx",
    "raw_url": "https://github.com/Tfe-VirtuoPiano/www/raw/f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33/virtuo-piano%2Fsrc%2Fcomponents%2Fcards%2FScoreCard.tsx",
    "contents_url": "https://api.github.com/repos/Tfe-VirtuoPiano/www/contents/virtuo-piano%2Fsrc%2Fcomponents%2Fcards%2FScoreCard.tsx?ref=f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33",
    "patch": "@@ -1,6 +1,9 @@\n import {\n   IconCalendar,\n   IconClock,\n+  IconFlame,\n+  IconHandFinger,\n+  IconHandStop,\n   IconMusic,\n   IconTrophy,\n } from '@tabler/icons-react';\n@@ -21,6 +24,7 @@ export interface ScoreSummary {\n   duration: string;\n   imageUrl?: string;\n   performance: number;\n+  hands?: string;\n }\n \n export default function ScoreCard({ score }: { score: ScoreSummary }) {\n@@ -67,10 +71,32 @@ export default function ScoreCard({ score }: { score: ScoreSummary }) {\n               <IconCalendar size={14} className=\"mr-1\" />\n               {score.playedAt}\n             </span>\n-            <span className=\"inline-flex items-center\">\n+            <span className=\"inline-flex items-center mr-3\">\n               <IconClock size={14} className=\"mr-1\" />\n               {score.duration}\n             </span>\n+            {score.hands && (\n+              <span\n+                className={`inline-flex items-center px-2 py-1 rounded-md text-xs font-medium border ${\n+                  score.hands === 'right'\n+                    ? 'bg-indigo-100/20 text-indigo-300 border-indigo-300/30'\n+                    : score.hands === 'left'\n+                    ? 'bg-green-100/20 text-green-300 border-green-300/30'\n+                    : score.hands === 'both'\n+                    ? 'bg-amber-100/20 text-amber-300 border-amber-300/30'\n+                    : 'bg-blue-100/20 text-blue-300 border-blue-300/30'\n+                }`}\n+              >\n+                <IconHandStop size={12} className=\"mr-1\" />\n+                {score.hands === 'right'\n+                  ? 'Main droite'\n+                  : score.hands === 'left'\n+                  ? 'Main gauche'\n+                  : score.hands === 'both'\n+                  ? 'Deux mains'\n+                  : score.hands}\n+              </span>\n+            )}\n           </div>\n \n           <div className=\"flex items-center justify-between\">"
  },
  {
    "sha": "184e8fa130c7bdcf0832f8973b3d5ecfc35b880f",
    "filename": "virtuo-piano/src/components/charts/BarChartWithNavigation.tsx",
    "status": "added",
    "additions": 220,
    "deletions": 0,
    "changes": 220,
    "blob_url": "https://github.com/Tfe-VirtuoPiano/www/blob/f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33/virtuo-piano%2Fsrc%2Fcomponents%2Fcharts%2FBarChartWithNavigation.tsx",
    "raw_url": "https://github.com/Tfe-VirtuoPiano/www/raw/f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33/virtuo-piano%2Fsrc%2Fcomponents%2Fcharts%2FBarChartWithNavigation.tsx",
    "contents_url": "https://api.github.com/repos/Tfe-VirtuoPiano/www/contents/virtuo-piano%2Fsrc%2Fcomponents%2Fcharts%2FBarChartWithNavigation.tsx?ref=f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33",
    "patch": "@@ -0,0 +1,220 @@\n+import { useState } from 'react';\n+import {\n+  BarChart,\n+  Bar,\n+  XAxis,\n+  YAxis,\n+  CartesianGrid,\n+  Tooltip,\n+  ResponsiveContainer,\n+} from 'recharts';\n+import { IconChevronLeft, IconChevronRight } from '@tabler/icons-react';\n+import * as Separator from '@radix-ui/react-separator';\n+import { Spinner } from '@/components/ui/spinner';\n+\n+interface BarConfig {\n+  dataKey: string;\n+  color: string;\n+  name: string;\n+  yAxisId?: string;\n+}\n+\n+interface BarInterval {\n+  label: string;\n+  data: any[];\n+}\n+\n+interface BarChartWithNavigationProps {\n+  title: string;\n+  icon: React.ReactNode;\n+  intervals: BarInterval[];\n+  bars: BarConfig[];\n+  index: number;\n+  onIndexChange: (index: number) => void;\n+  height?: number;\n+  themeColor: string;\n+  yAxisDomain?: [number, number];\n+  multiAxis?: boolean;\n+  isLoading?: boolean;\n+  error?: any;\n+  maxIntervals?: number;\n+}\n+\n+export default function BarChartWithNavigation({\n+  title,\n+  icon,\n+  intervals,\n+  bars,\n+  index,\n+  onIndexChange,\n+  height = 280,\n+  themeColor,\n+  yAxisDomain,\n+  multiAxis = false,\n+  isLoading = false,\n+  error = null,\n+  maxIntervals = 0,\n+}: BarChartWithNavigationProps) {\n+  const currentData = intervals[0]?.data || [];\n+\n+  return (\n+    <div className=\"bg-white/5 backdrop-blur-sm rounded-xl p-6 border border-white/10 h-full\">\n+      <h3 className=\"text-lg font-semibold text-white flex items-center mb-4\">\n+        {icon}\n+        {title}\n+      </h3>\n+\n+      <div className=\"flex flex-col items-center mb-2\">\n+        <div className=\"flex items-center justify-center space-x-4 mb-2\">\n+          <button\n+            className=\"p-2 rounded-full hover:bg-white/10 transition-colors\"\n+            onClick={() =>\n+              onIndexChange(\n+                Math.min((maxIntervals || intervals.length) - 1, index + 1)\n+              )\n+            }\n+            disabled={index >= (maxIntervals || intervals.length) - 1}\n+            aria-label=\"Période plus ancienne\"\n+          >\n+            <IconChevronLeft size={20} className={themeColor} />\n+          </button>\n+          <span className=\"text-sm font-medium text-white/90\">\n+            {intervals[0]?.label || `Intervalle ${index + 1}`}\n+          </span>\n+          <button\n+            className=\"p-2 rounded-full hover:bg-white/10 transition-colors\"\n+            onClick={() => onIndexChange(Math.max(0, index - 1))}\n+            disabled={index === 0}\n+            aria-label=\"Période plus récente\"\n+          >\n+            <IconChevronRight size={20} className={themeColor} />\n+          </button>\n+        </div>\n+      </div>\n+\n+      {isLoading ? (\n+        <div className=\"flex items-center justify-center\" style={{ height }}>\n+          <Spinner variant=\"bars\" size={32} className=\"text-white\" />\n+        </div>\n+      ) : error ? (\n+        <div className=\"flex items-center justify-center\" style={{ height }}>\n+          <div className=\"text-center text-red-400 text-sm\">\n+            {error.message || 'Erreur lors du chargement'}\n+          </div>\n+        </div>\n+      ) : (\n+        <ResponsiveContainer width=\"100%\" height={height}>\n+          <BarChart\n+            data={currentData}\n+            margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n+          >\n+            <CartesianGrid strokeDasharray=\"3 3\" opacity={0.2} />\n+            <XAxis dataKey=\"mois\" tick={{ fontSize: 12, fill: '#94a3b8' }} />\n+\n+            {multiAxis ? (\n+              // Mode multi-axes : créer un YAxis pour chaque yAxisId unique\n+              <>\n+                {Array.from(\n+                  new Set(bars.map((bar) => bar.yAxisId).filter(Boolean))\n+                ).map((yAxisId) => (\n+                  <YAxis\n+                    key={yAxisId}\n+                    yAxisId={yAxisId}\n+                    orientation=\"left\"\n+                    domain={\n+                      yAxisId === 'score'\n+                        ? [8000, 10000]\n+                        : yAxisId === 'combo'\n+                        ? [300, 600]\n+                        : [3, 5]\n+                    }\n+                    tick={{\n+                      fontSize: 12,\n+                      fill:\n+                        bars.find((b) => b.yAxisId === yAxisId)?.color ||\n+                        '#94a3b8',\n+                    }}\n+                  />\n+                ))}\n+              </>\n+            ) : (\n+              // Mode simple : un seul YAxis sans yAxisId\n+              <YAxis\n+                domain={yAxisDomain}\n+                tick={{ fontSize: 12, fill: '#94a3b8' }}\n+              />\n+            )}\n+\n+            <Tooltip\n+              contentStyle={{\n+                backgroundColor: '#1e293b',\n+                border: 'none',\n+                borderRadius: '8px',\n+                fontSize: '12px',\n+              }}\n+              itemStyle={{ color: '#e2e8f0' }}\n+              labelStyle={{\n+                color: '#e2e8f0',\n+                fontWeight: 'bold',\n+                marginBottom: '4px',\n+              }}\n+              formatter={(value, name) => {\n+                const bar = bars.find((b) => b.dataKey === name);\n+                if (bar?.dataKey === 'precision')\n+                  return [`${value}%`, 'Précision'];\n+                if (bar?.dataKey === 'performance')\n+                  return [`${value}%`, 'Performance'];\n+                if (bar?.dataKey === 'score')\n+                  return [`${value} points`, 'Meilleur score'];\n+                if (bar?.dataKey === 'combo')\n+                  return [`${value} notes`, 'Combo max'];\n+                if (bar?.dataKey === 'multi')\n+                  return [`x${value}`, 'Multiplicateur max'];\n+                return [`${value}`, bar?.name || name];\n+              }}\n+            />\n+\n+            {multiAxis\n+              ? // Mode multi-axes : utiliser les yAxisId des barres\n+                bars.map((bar) => (\n+                  <Bar\n+                    key={bar.dataKey}\n+                    yAxisId={bar.yAxisId}\n+                    dataKey={bar.dataKey}\n+                    fill={bar.color}\n+                    radius={[4, 4, 0, 0]}\n+                  />\n+                ))\n+              : // Mode simple : aucun yAxisId\n+                bars.map((bar) => (\n+                  <Bar\n+                    key={bar.dataKey}\n+                    dataKey={bar.dataKey}\n+                    fill={bar.color}\n+                    radius={[4, 4, 0, 0]}\n+                  />\n+                ))}\n+          </BarChart>\n+        </ResponsiveContainer>\n+      )}\n+\n+      <Separator.Root className=\"h-px bg-slate-500 dark:bg-slate-800 my-4\" />\n+\n+      <div className=\"flex items-center justify-between flex-wrap gap-4 mt-2 mb-2\">\n+        <div className=\"flex items-center space-x-4\">\n+          {bars.map((bar) => (\n+            <div key={bar.dataKey} className=\"flex items-center\">\n+              <div\n+                className=\"w-3 h-3 rounded-full mr-2\"\n+                style={{ backgroundColor: bar.color }}\n+              ></div>\n+              <span className=\"text-xs text-slate-400 dark:text-slate-200\">\n+                {bar.name}\n+              </span>\n+            </div>\n+          ))}\n+        </div>\n+      </div>\n+    </div>\n+  );\n+}"
  },
  {
    "sha": "55eb25fc54c92195ff1f273e062f80dbe952da00",
    "filename": "virtuo-piano/src/components/charts/ChartSummary.tsx",
    "status": "added",
    "additions": 32,
    "deletions": 0,
    "changes": 32,
    "blob_url": "https://github.com/Tfe-VirtuoPiano/www/blob/f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33/virtuo-piano%2Fsrc%2Fcomponents%2Fcharts%2FChartSummary.tsx",
    "raw_url": "https://github.com/Tfe-VirtuoPiano/www/raw/f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33/virtuo-piano%2Fsrc%2Fcomponents%2Fcharts%2FChartSummary.tsx",
    "contents_url": "https://api.github.com/repos/Tfe-VirtuoPiano/www/contents/virtuo-piano%2Fsrc%2Fcomponents%2Fcharts%2FChartSummary.tsx?ref=f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33",
    "patch": "@@ -0,0 +1,32 @@\n+interface SummaryItem {\n+  label: string;\n+  value: string | number;\n+  color: string;\n+}\n+\n+interface ChartSummaryProps {\n+  title: string;\n+  items: SummaryItem[];\n+}\n+\n+export default function ChartSummary({ title, items }: ChartSummaryProps) {\n+  return (\n+    <>\n+      <p className=\"text-base text-slate-300 dark:text-slate-100 mb-3\">\n+        {title}\n+      </p>\n+      <div className=\"flex items-center justify-between px-8\">\n+        {items.map((item, index) => (\n+          <div key={index} className=\"flex flex-col items-center\">\n+            <span className=\"text-xs text-slate-300 dark:text-slate-100\">\n+              {item.label}\n+            </span>\n+            <span className={`text-xl font-bold ${item.color}`}>\n+              {item.value}\n+            </span>\n+          </div>\n+        ))}\n+      </div>\n+    </>\n+  );\n+}"
  },
  {
    "sha": "bd3dc78dbf82de5b83e1f301d974ea27dae12513",
    "filename": "virtuo-piano/src/components/charts/LineChartWithNavigation.tsx",
    "status": "added",
    "additions": 206,
    "deletions": 0,
    "changes": 206,
    "blob_url": "https://github.com/Tfe-VirtuoPiano/www/blob/f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33/virtuo-piano%2Fsrc%2Fcomponents%2Fcharts%2FLineChartWithNavigation.tsx",
    "raw_url": "https://github.com/Tfe-VirtuoPiano/www/raw/f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33/virtuo-piano%2Fsrc%2Fcomponents%2Fcharts%2FLineChartWithNavigation.tsx",
    "contents_url": "https://api.github.com/repos/Tfe-VirtuoPiano/www/contents/virtuo-piano%2Fsrc%2Fcomponents%2Fcharts%2FLineChartWithNavigation.tsx?ref=f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33",
    "patch": "@@ -0,0 +1,206 @@\n+import {\n+  LineChart,\n+  Line,\n+  XAxis,\n+  YAxis,\n+  CartesianGrid,\n+  Tooltip,\n+  ResponsiveContainer,\n+} from 'recharts';\n+import { IconChevronLeft, IconChevronRight } from '@tabler/icons-react';\n+import * as Separator from '@radix-ui/react-separator';\n+import { Spinner } from '@/components/ui/spinner';\n+\n+interface LineConfig {\n+  dataKey: string;\n+  color: string;\n+  strokeWidth?: number;\n+  strokeDasharray?: string;\n+  name: string;\n+}\n+\n+interface IntervalOption {\n+  value: number;\n+  label: string;\n+}\n+\n+interface LineChartWithNavigationProps {\n+  isLoading: boolean;\n+  error: Error | null;\n+  title: string;\n+  icon: React.ReactNode;\n+  data: any[];\n+  lines: LineConfig[];\n+  interval: number;\n+  index: number;\n+  onIntervalChange: (interval: number) => void;\n+  onIndexChange: (index: number) => void;\n+  maxDataLength: number;\n+  yAxisDomain?: [number, number];\n+  height?: number;\n+  themeColor: string;\n+  intervalOptions: IntervalOption[];\n+  summary?: React.ReactNode;\n+}\n+\n+export default function LineChartWithNavigation({\n+  isLoading,\n+  error,\n+  title,\n+  icon,\n+  data,\n+  lines,\n+  interval,\n+  index,\n+  onIntervalChange,\n+  onIndexChange,\n+  maxDataLength,\n+  yAxisDomain = [60, 100],\n+  height = 250,\n+  themeColor,\n+  intervalOptions,\n+  summary,\n+}: LineChartWithNavigationProps) {\n+  const getDefaultIndex = (dataLength: number, interval: number) => {\n+    const numCompleteIntervals = Math.floor(dataLength / interval);\n+    return Math.max(0, numCompleteIntervals - 1);\n+  };\n+\n+  const handleIntervalChange = (newInterval: number) => {\n+    onIntervalChange(newInterval);\n+    onIndexChange(getDefaultIndex(maxDataLength, newInterval));\n+  };\n+\n+  return (\n+    <div className=\"bg-white/5 backdrop-blur-sm rounded-xl p-6 border border-white/10 h-full\">\n+      <div className=\"flex items-center justify-between mb-4\">\n+        <h3 className=\"text-lg font-semibold text-white flex items-center\">\n+          {icon}\n+          {title}\n+        </h3>\n+        <div className=\"flex flex-col items-center mb-2\">\n+          <div className=\"flex items-center justify-center space-x-4 mb-2\">\n+            <button\n+              onClick={() => onIndexChange(index + 1)}\n+              disabled={(index + 1) * interval >= maxDataLength}\n+              className=\"p-2 rounded-full hover:bg-white/10 transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\n+            >\n+              <IconChevronLeft size={20} className={themeColor} />\n+            </button>\n+            <select\n+              value={interval}\n+              onChange={(e) => handleIntervalChange(Number(e.target.value))}\n+              className=\"bg-white/10 text-white text-sm rounded px-3 py-2 border border-white/20 min-w-[140px]\"\n+            >\n+              {intervalOptions.map((option) => (\n+                <option\n+                  key={option.value}\n+                  value={option.value}\n+                  className=\"bg-slate-800\"\n+                >\n+                  {option.label}\n+                </option>\n+              ))}\n+            </select>\n+            <button\n+              onClick={() => onIndexChange(Math.max(0, index - 1))}\n+              disabled={index === 0}\n+              className=\"p-2 rounded-full hover:bg-white/10 transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\n+            >\n+              <IconChevronRight size={20} className={themeColor} />\n+            </button>\n+          </div>\n+        </div>\n+      </div>\n+      {isLoading ? (\n+        <div className=\"flex items-center justify-center h-[250px]\">\n+          <Spinner variant=\"bars\" size={32} className=\"text-white\" />\n+        </div>\n+      ) : error ? (\n+        <div className=\"flex items-center justify-center h-[250px]\">\n+          <div className=\"text-center text-red-400 text-sm\">\n+            {error.message || 'Erreur lors du chargement'}\n+          </div>\n+        </div>\n+      ) : (\n+        <ResponsiveContainer width=\"100%\" height={height}>\n+          <LineChart\n+            data={data}\n+            margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n+          >\n+            <CartesianGrid strokeDasharray=\"3 3\" opacity={0.2} />\n+            <XAxis dataKey=\"session\" tick={{ fontSize: 12, fill: '#94a3b8' }} />\n+            <YAxis\n+              domain={yAxisDomain}\n+              tick={{ fontSize: 12, fill: '#94a3b8' }}\n+            />\n+            <Tooltip\n+              contentStyle={{\n+                backgroundColor: '#1e293b',\n+                border: 'none',\n+                borderRadius: '8px',\n+                fontSize: '12px',\n+              }}\n+              itemStyle={{ color: '#e2e8f0' }}\n+              labelStyle={{\n+                color: '#e2e8f0',\n+                fontWeight: 'bold',\n+                marginBottom: '4px',\n+              }}\n+              formatter={(value, name) => {\n+                const line = lines.find((l) => l.dataKey === name);\n+                if (value === null || value === undefined) {\n+                  return ['Non testé', line?.name || name];\n+                }\n+                return [`${value}%`, line?.name || name];\n+              }}\n+            />\n+\n+            {lines.map((line, idx) => (\n+              <Line\n+                key={line.dataKey}\n+                type=\"monotone\"\n+                dataKey={line.dataKey}\n+                stroke={line.color}\n+                strokeWidth={line.strokeWidth || (idx === 0 ? 3 : 2)}\n+                strokeDasharray={line.strokeDasharray}\n+                connectNulls={true}\n+                dot={{\n+                  r: idx === 0 ? 4 : 3,\n+                  fill: line.color,\n+                  strokeWidth: 0,\n+                }}\n+                activeDot={{\n+                  r: idx === 0 ? 6 : 5,\n+                  fill: line.color.replace('500', '400'),\n+                }}\n+              />\n+            ))}\n+          </LineChart>\n+        </ResponsiveContainer>\n+      )}\n+\n+      <Separator.Root className=\"h-px bg-slate-500 dark:bg-slate-800 my-4\" />\n+\n+      <div className=\"flex items-center justify-between flex-wrap gap-4 mt-4 mb-2\">\n+        <div className=\"flex items-center space-x-4\">\n+          {lines.map((line, idx) => (\n+            <div key={line.dataKey} className=\"flex items-center\">\n+              <div\n+                className={`w-4 h-2 mr-2 rounded ${\n+                  idx === 0 ? '' : 'border-dashed border-t'\n+                }`}\n+                style={{ backgroundColor: line.color }}\n+              ></div>\n+              <span className=\"text-xs text-slate-400 dark:text-slate-200\">\n+                {line.name}\n+              </span>\n+            </div>\n+          ))}\n+        </div>\n+      </div>\n+\n+      {summary && <div className=\"mt-6\">{summary}</div>}\n+    </div>\n+  );\n+}"
  },
  {
    "sha": "af46809459c0f87e4cf28ef1b79bbb62679fb35e",
    "filename": "virtuo-piano/src/components/charts/MultiAxisLineChart.tsx",
    "status": "added",
    "additions": 226,
    "deletions": 0,
    "changes": 226,
    "blob_url": "https://github.com/Tfe-VirtuoPiano/www/blob/f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33/virtuo-piano%2Fsrc%2Fcomponents%2Fcharts%2FMultiAxisLineChart.tsx",
    "raw_url": "https://github.com/Tfe-VirtuoPiano/www/raw/f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33/virtuo-piano%2Fsrc%2Fcomponents%2Fcharts%2FMultiAxisLineChart.tsx",
    "contents_url": "https://api.github.com/repos/Tfe-VirtuoPiano/www/contents/virtuo-piano%2Fsrc%2Fcomponents%2Fcharts%2FMultiAxisLineChart.tsx?ref=f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33",
    "patch": "@@ -0,0 +1,226 @@\n+import {\n+  LineChart,\n+  Line,\n+  XAxis,\n+  YAxis,\n+  CartesianGrid,\n+  Tooltip,\n+  ResponsiveContainer,\n+} from 'recharts';\n+import { IconChevronLeft, IconChevronRight } from '@tabler/icons-react';\n+import * as Separator from '@radix-ui/react-separator';\n+import { Spinner } from '@/components/ui/spinner';\n+\n+interface MultiAxisLine {\n+  dataKey: string;\n+  color: string;\n+  name: string;\n+  yAxisId: string;\n+  strokeDasharray?: string;\n+}\n+\n+interface IntervalOption {\n+  value: number;\n+  label: string;\n+}\n+\n+interface MultiAxisLineChartProps {\n+  title: string;\n+  icon: React.ReactNode;\n+  data: any[];\n+  lines: MultiAxisLine[];\n+  interval: number;\n+  index: number;\n+  onIntervalChange: (interval: number) => void;\n+  onIndexChange: (index: number) => void;\n+  maxDataLength: number;\n+  height?: number;\n+  themeColor: string;\n+  intervalOptions: IntervalOption[];\n+  summary?: React.ReactNode;\n+  isLoading?: boolean;\n+  error: Error | null;\n+  scoreAxisDomain: number[];\n+  comboAxisDomain: number[];\n+  multiAxisDomain: number[];\n+}\n+\n+export default function MultiAxisLineChart({\n+  title,\n+  icon,\n+  data,\n+  lines,\n+  interval,\n+  index,\n+  onIntervalChange,\n+  onIndexChange,\n+  maxDataLength,\n+  height = 250,\n+  themeColor,\n+  intervalOptions,\n+  summary,\n+  isLoading,\n+  error,\n+  scoreAxisDomain,\n+  comboAxisDomain,\n+  multiAxisDomain,\n+}: MultiAxisLineChartProps) {\n+  const getDefaultIndex = (dataLength: number, interval: number) => {\n+    const numCompleteIntervals = Math.floor(dataLength / interval);\n+    return Math.max(0, numCompleteIntervals - 1);\n+  };\n+\n+  const handleIntervalChange = (newInterval: number) => {\n+    onIntervalChange(newInterval);\n+    onIndexChange(getDefaultIndex(maxDataLength, newInterval));\n+  };\n+\n+  return (\n+    <div className=\"bg-white/5 backdrop-blur-sm rounded-xl p-6 border border-white/10 h-full\">\n+      <div className=\"flex items-center justify-between mb-4\">\n+        <h3 className=\"text-lg font-semibold text-white flex items-center\">\n+          {icon}\n+          {title}\n+        </h3>\n+        <div className=\"flex flex-col items-center mb-2\">\n+          <div className=\"flex items-center justify-center space-x-4 mb-2\">\n+            <button\n+              onClick={() => onIndexChange(index + 1)}\n+              disabled={(index + 1) * interval >= maxDataLength}\n+              className=\"p-2 rounded-full hover:bg-white/10 transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\n+            >\n+              <IconChevronLeft size={20} className={themeColor} />\n+            </button>\n+            <select\n+              value={interval}\n+              onChange={(e) => handleIntervalChange(Number(e.target.value))}\n+              className=\"bg-white/10 text-white text-sm rounded px-3 py-2 border border-white/20 min-w-[140px]\"\n+            >\n+              {intervalOptions.map((option) => (\n+                <option\n+                  key={option.value}\n+                  value={option.value}\n+                  className=\"bg-slate-800\"\n+                >\n+                  {option.label}\n+                </option>\n+              ))}\n+            </select>\n+            <button\n+              onClick={() => onIndexChange(Math.max(0, index - 1))}\n+              disabled={index === 0}\n+              className=\"p-2 rounded-full hover:bg-white/10 transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\n+            >\n+              <IconChevronRight size={20} className={themeColor} />\n+            </button>\n+          </div>\n+        </div>\n+      </div>\n+      {isLoading ? (\n+        <div className=\"flex items-center justify-center h-[250px]\">\n+          <Spinner variant=\"bars\" size={32} className=\"text-white\" />\n+        </div>\n+      ) : error ? (\n+        <div className=\"flex items-center justify-center h-[250px]\">\n+          <div className=\"text-center text-red-400 text-sm\">\n+            {error.message || 'Erreur lors du chargement'}\n+          </div>\n+        </div>\n+      ) : (\n+        <ResponsiveContainer width=\"100%\" height={height}>\n+          <LineChart\n+            data={data}\n+            margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n+          >\n+            <CartesianGrid strokeDasharray=\"3 3\" opacity={0.2} />\n+            <XAxis dataKey=\"session\" tick={{ fontSize: 12, fill: '#94a3b8' }} />\n+\n+            {/* Axes Y multiples */}\n+            <YAxis\n+              yAxisId=\"score\"\n+              domain={scoreAxisDomain}\n+              tick={{ fontSize: 12, fill: '#94a3b8' }}\n+            />\n+            <YAxis\n+              yAxisId=\"combo\"\n+              orientation=\"left\"\n+              domain={comboAxisDomain}\n+              tick={{ fontSize: 12, fill: '#f59e0b' }}\n+            />\n+            <YAxis\n+              yAxisId=\"multi\"\n+              orientation=\"left\"\n+              domain={multiAxisDomain}\n+              tick={{ fontSize: 12, fill: '#10b981' }}\n+            />\n+\n+            <Tooltip\n+              contentStyle={{\n+                backgroundColor: '#1e293b',\n+                border: 'none',\n+                borderRadius: '8px',\n+                fontSize: '12px',\n+              }}\n+              itemStyle={{ color: '#e2e8f0' }}\n+              labelStyle={{\n+                color: '#e2e8f0',\n+                fontWeight: 'bold',\n+                marginBottom: '4px',\n+              }}\n+              formatter={(value, name) => {\n+                const line = lines.find((l) => l.dataKey === name);\n+                if (line?.dataKey === 'score')\n+                  return [`${value} points`, 'Score'];\n+                if (line?.dataKey === 'combo')\n+                  return [`${value} notes`, 'Combo max'];\n+                if (line?.dataKey === 'multi')\n+                  return [`x${value}`, 'Multiplicateur max'];\n+                return [`${value}`, line?.name || name];\n+              }}\n+            />\n+\n+            {lines.map((line, idx) => (\n+              <Line\n+                key={line.dataKey}\n+                yAxisId={line.yAxisId}\n+                type=\"monotone\"\n+                dataKey={line.dataKey}\n+                stroke={line.color}\n+                strokeWidth={idx === 0 ? 3 : 2}\n+                strokeDasharray={line.strokeDasharray}\n+                dot={{\n+                  r: idx === 0 ? 4 : 3,\n+                  fill: line.color,\n+                  strokeWidth: 0,\n+                }}\n+                activeDot={{\n+                  r: idx === 0 ? 6 : 5,\n+                  fill: line.color.replace('500', '400'),\n+                }}\n+              />\n+            ))}\n+          </LineChart>\n+        </ResponsiveContainer>\n+      )}\n+      <Separator.Root className=\"h-px bg-slate-500 dark:bg-slate-800 my-4\" />\n+\n+      <div className=\"flex items-center justify-between flex-wrap gap-4 mt-4 mb-2\">\n+        <div className=\"flex items-center space-x-4\">\n+          {lines.map((line) => (\n+            <div key={line.dataKey} className=\"flex items-center\">\n+              <div\n+                className=\"w-4 h-2 mr-2 rounded\"\n+                style={{ backgroundColor: line.color }}\n+              ></div>\n+              <span className=\"text-xs text-slate-400 dark:text-slate-200\">\n+                {line.name}\n+              </span>\n+            </div>\n+          ))}\n+        </div>\n+      </div>\n+\n+      {summary && <div className=\"mt-6\">{summary}</div>}\n+    </div>\n+  );\n+}"
  },
  {
    "sha": "0c13917832a608ee582d20ad71fd0f7e2942349e",
    "filename": "virtuo-piano/src/components/timeline/RecordsTimeline.tsx",
    "status": "added",
    "additions": 213,
    "deletions": 0,
    "changes": 213,
    "blob_url": "https://github.com/Tfe-VirtuoPiano/www/blob/f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33/virtuo-piano%2Fsrc%2Fcomponents%2Ftimeline%2FRecordsTimeline.tsx",
    "raw_url": "https://github.com/Tfe-VirtuoPiano/www/raw/f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33/virtuo-piano%2Fsrc%2Fcomponents%2Ftimeline%2FRecordsTimeline.tsx",
    "contents_url": "https://api.github.com/repos/Tfe-VirtuoPiano/www/contents/virtuo-piano%2Fsrc%2Fcomponents%2Ftimeline%2FRecordsTimeline.tsx?ref=f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33",
    "patch": "@@ -0,0 +1,213 @@\n+'use client';\n+\n+import { useEffect, useState } from 'react';\n+import {\n+  IconRocket,\n+  IconTrophy,\n+  IconTarget,\n+  IconFlame,\n+  IconBolt,\n+  IconClock,\n+  IconStar,\n+  IconMedal,\n+} from '@tabler/icons-react';\n+import { Spinner } from '@/components/ui/spinner';\n+import {\n+  getBubbleBorderColor,\n+  getBubbleColor,\n+  getIcon,\n+  getPopupIcon,\n+  getValueDisplay,\n+} from '../../features/performances/utils/chartUtils';\n+\n+export interface TimelineRecord {\n+  id: number;\n+  date: string;\n+  score: number;\n+  type: string;\n+  description: string;\n+  details: string;\n+}\n+\n+interface RecordsTimelineProps {\n+  records: TimelineRecord[];\n+  isLoading: boolean;\n+  error: Error | null;\n+}\n+\n+export default function RecordsTimeline({\n+  records,\n+  isLoading,\n+  error,\n+}: RecordsTimelineProps) {\n+  const [selectedRecord, setSelectedRecord] = useState<number | null>(null);\n+  const [mounted, setMounted] = useState(false);\n+  const [animateRecords, setAnimateRecords] = useState(false);\n+\n+  useEffect(() => {\n+    setMounted(true);\n+  }, []);\n+\n+  // Déclencher l'animation quand les données changent\n+  useEffect(() => {\n+    if (mounted && records.length > 0 && !isLoading) {\n+      setAnimateRecords(false);\n+      // Petit délai pour permettre au DOM de se mettre à jour\n+      const timer = setTimeout(() => {\n+        setAnimateRecords(true);\n+      }, 50);\n+      return () => clearTimeout(timer);\n+    }\n+  }, [records, mounted, isLoading]);\n+\n+  return (\n+    <div className=\"relative\">\n+      {/* Timeline horizontale */}\n+      <div className=\"relative flex items-center justify-between px-4 py-8\">\n+        {/* Ligne de base */}\n+        <div className=\"absolute top-1/2 left-6 right-6 h-0.5 bg-gradient-to-r from-indigo-500 via-purple-500 to-pink-500 transform -translate-y-1/2\"></div>\n+\n+        {/* Bulles d'icônes */}\n+\n+        {isLoading ? (\n+          <div className=\"flex items-center justify-center w-full\">\n+            <Spinner variant=\"bars\" size={32} className=\"text-white\" />\n+          </div>\n+        ) : error ? (\n+          <div className=\"flex items-center justify-center w-full\">\n+            <div className=\"text-center text-red-400 text-sm\">\n+              {error.message || 'Erreur lors du chargement'}\n+            </div>\n+          </div>\n+        ) : (\n+          records.map((record, index) => (\n+            <div\n+              key={record.id}\n+              className={`relative z-10 ${\n+                animateRecords ? 'opacity-100 scale-100' : 'opacity-0 scale-75'\n+              } animate-timeline-bubble`}\n+              style={{\n+                transitionDelay: animateRecords ? `${index * 400}ms` : '0ms',\n+              }}\n+            >\n+              {/* Bulle cliquable */}\n+              <button\n+                onClick={() =>\n+                  setSelectedRecord(\n+                    selectedRecord === record.id ? null : record.id\n+                  )\n+                }\n+                className={`group relative w-12 h-12 rounded-full border-2 transition-all duration-300 hover:scale-110 hover:shadow-lg cursor-pointer ${\n+                  selectedRecord === record.id\n+                    ? 'bg-white shadow-xl'\n+                    : `bg-gradient-to-br ${getBubbleColor(\n+                        record.type\n+                      )} border-white hover:${getBubbleBorderColor(\n+                        record.type\n+                      )}`\n+                }`}\n+              >\n+                <div\n+                  className={`absolute inset-0 rounded-full bg-gradient-to-br ${getBubbleColor(\n+                    record.type\n+                  )} opacity-0 group-hover:opacity-20 transition-opacity`}\n+                ></div>\n+                <div className=\"relative flex items-center justify-center w-full h-full\">\n+                  {getIcon(record.type, selectedRecord === record.id)}\n+                </div>\n+\n+                {/* Indicateur de sélection */}\n+                {selectedRecord === record.id && (\n+                  <div className=\"absolute -top-1 -right-1 w-4 h-4 bg-green-500 rounded-full border-2 border-white animate-pulse\"></div>\n+                )}\n+              </button>\n+\n+              {/* Date sous la bulle */}\n+              <div className=\"absolute top-14 left-1/2 transform -translate-x-1/2 whitespace-nowrap\">\n+                <span className=\"text-xs text-white/70 font-medium\">\n+                  {new Date(record.date).toLocaleDateString('fr-FR', {\n+                    day: 'numeric',\n+                    month: 'short',\n+                  })}\n+                </span>\n+              </div>\n+\n+              {/* Popup d'information */}\n+              {selectedRecord === record.id && (\n+                <div\n+                  className={`absolute z-20 ${\n+                    index === 0\n+                      ? 'bottom-16 left-0 transform translate-x-0'\n+                      : index === records.length - 1\n+                      ? 'bottom-16 right-0 transform translate-x-0'\n+                      : 'bottom-16 left-1/2 transform -translate-x-1/2'\n+                  }`}\n+                >\n+                  <div className=\"bg-white dark:bg-slate-800 rounded-xl shadow-2xl border border-slate-200 dark:border-slate-700 p-4 min-w-[280px] max-w-[320px]\">\n+                    {/* Flèche vers le bas */}\n+                    <div\n+                      className={`absolute top-full w-0 h-0 border-l-4 border-r-4 border-t-4 border-transparent border-t-white dark:border-t-slate-800 ${\n+                        index === 0\n+                          ? 'left-6'\n+                          : index === records.length - 1\n+                          ? 'right-6'\n+                          : 'left-1/2 transform -translate-x-1/2'\n+                      }`}\n+                    ></div>\n+\n+                    {/* En-tête du popup */}\n+                    <div className=\"flex items-center space-x-3 mb-3\">\n+                      <div className=\"flex items-center justify-center w-8 h-8\">\n+                        {getPopupIcon(record.type)}\n+                      </div>\n+                      <div>\n+                        <h4 className=\"font-semibold text-slate-900 dark:text-white text-sm\">\n+                          {record.description}\n+                        </h4>\n+                        <p className=\"text-xs text-slate-500 dark:text-slate-400\">\n+                          {new Date(record.date).toLocaleDateString('fr-FR', {\n+                            weekday: 'long',\n+                            year: 'numeric',\n+                            month: 'long',\n+                            day: 'numeric',\n+                          })}\n+                        </p>\n+                      </div>\n+                    </div>\n+\n+                    {/* Valeur principale */}\n+                    <div className=\"bg-gradient-to-r from-indigo-50 to-purple-50 dark:from-indigo-900/20 dark:to-purple-900/20 rounded-lg p-3 mb-3\">\n+                      <div className=\"text-center\">\n+                        <div className=\"text-2xl font-bold text-indigo-600 dark:text-indigo-400\">\n+                          {getValueDisplay(record)}\n+                        </div>\n+                        <div className=\"text-xs text-indigo-500 dark:text-indigo-300 mt-1\">\n+                          Nouveau record !\n+                        </div>\n+                      </div>\n+                    </div>\n+\n+                    {/* Détails */}\n+                    <p className=\"text-sm text-slate-600 dark:text-slate-300 leading-relaxed\">\n+                      {record.details}\n+                    </p>\n+\n+                    {/* Bouton fermer */}\n+                    <button\n+                      onClick={() => setSelectedRecord(null)}\n+                      className=\"absolute top-2 right-2 w-6 h-6 rounded-full bg-slate-100 dark:bg-slate-700 hover:bg-slate-200 dark:hover:bg-slate-600 flex items-center justify-center transition-colors\"\n+                    >\n+                      <span className=\"text-slate-500 dark:text-slate-400 text-xs\">\n+                        ×\n+                      </span>\n+                    </button>\n+                  </div>\n+                </div>\n+              )}\n+            </div>\n+          ))\n+        )}\n+      </div>\n+    </div>\n+  );\n+}"
  },
  {
    "sha": "e32561cec8164d108efea11ef34a36109d43ab9d",
    "filename": "virtuo-piano/src/contexts/SongContext.tsx",
    "status": "modified",
    "additions": 4,
    "deletions": 4,
    "changes": 8,
    "blob_url": "https://github.com/Tfe-VirtuoPiano/www/blob/f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33/virtuo-piano%2Fsrc%2Fcontexts%2FSongContext.tsx",
    "raw_url": "https://github.com/Tfe-VirtuoPiano/www/raw/f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33/virtuo-piano%2Fsrc%2Fcontexts%2FSongContext.tsx",
    "contents_url": "https://api.github.com/repos/Tfe-VirtuoPiano/www/contents/virtuo-piano%2Fsrc%2Fcontexts%2FSongContext.tsx?ref=f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33",
    "patch": "@@ -1,17 +1,17 @@\n 'use client';\n \n-import { Songs } from '@prisma/client';\n import React, { createContext, useContext, useState, ReactNode } from 'react';\n+import { SongBasicData } from '@/lib/types';\n \n type SongContextType = {\n-  currentSong: Songs | null;\n-  setCurrentSong: (song: Songs | null) => void;\n+  currentSong: SongBasicData | null;\n+  setCurrentSong: (song: SongBasicData | null) => void;\n };\n \n const SongContext = createContext<SongContextType | undefined>(undefined);\n \n export function SongProvider({ children }: { children: ReactNode }) {\n-  const [currentSong, setCurrentSong] = useState<Songs | null>(null);\n+  const [currentSong, setCurrentSong] = useState<SongBasicData | null>(null);\n \n   return (\n     <SongContext.Provider value={{ currentSong, setCurrentSong }}>"
  },
  {
    "sha": "7acdb631ebacea81e45434336619f74ff56f9bde",
    "filename": "virtuo-piano/src/customHooks/useHeatmap.ts",
    "status": "modified",
    "additions": 1,
    "deletions": 4,
    "changes": 5,
    "blob_url": "https://github.com/Tfe-VirtuoPiano/www/blob/f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33/virtuo-piano%2Fsrc%2FcustomHooks%2FuseHeatmap.ts",
    "raw_url": "https://github.com/Tfe-VirtuoPiano/www/raw/f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33/virtuo-piano%2Fsrc%2FcustomHooks%2FuseHeatmap.ts",
    "contents_url": "https://api.github.com/repos/Tfe-VirtuoPiano/www/contents/virtuo-piano%2Fsrc%2FcustomHooks%2FuseHeatmap.ts?ref=f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33",
    "patch": "@@ -3,10 +3,7 @@ import {\n   getHeatmapData,\n   getSessionsByDate,\n } from '@/lib/actions/heatmap-actions';\n-import {\n-  ScoreDurationData,\n-  SessionDetail,\n-} from '@/lib/services/performances-services';\n+import { SessionDetail } from '@/lib/types';\n import {\n   generateYearData,\n   generateMonthLabels,"
  },
  {
    "sha": "028e2be224448ef82b18edb48823253e3fb73060",
    "filename": "virtuo-piano/src/customHooks/useSongPerformances.ts",
    "status": "added",
    "additions": 471,
    "deletions": 0,
    "changes": 471,
    "blob_url": "https://github.com/Tfe-VirtuoPiano/www/blob/f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33/virtuo-piano%2Fsrc%2FcustomHooks%2FuseSongPerformances.ts",
    "raw_url": "https://github.com/Tfe-VirtuoPiano/www/raw/f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33/virtuo-piano%2Fsrc%2FcustomHooks%2FuseSongPerformances.ts",
    "contents_url": "https://api.github.com/repos/Tfe-VirtuoPiano/www/contents/virtuo-piano%2Fsrc%2FcustomHooks%2FuseSongPerformances.ts?ref=f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33",
    "patch": "@@ -0,0 +1,471 @@\n+import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\n+import {\n+  getSongLearningModeTilesAction,\n+  getSongPerformanceGeneralTilesAction,\n+  getSongPlayModeTilesAction,\n+  getSongPracticeDataAction,\n+  getSongLearningPrecisionDataAction,\n+  getSongLearningPerformanceDataAction,\n+  getSongPerformancePrecisionBarChartDataAction,\n+  getSongGamingLineChartDataAction,\n+  getSongGamingBarChartDataAction,\n+  getSongTimelineRecordsDataAction,\n+} from '@/lib/actions/songPerformances-actions';\n+\n+// Hook pour les tuiles générales\n+export function useSongPerformanceGeneralTiles(songId: string) {\n+  return useQuery({\n+    queryKey: ['songPerformanceGeneralTiles', songId],\n+    queryFn: () => getSongPerformanceGeneralTilesAction(songId),\n+    enabled: !!songId,\n+  });\n+}\n+\n+// Hook pour les données de pratique avec préchargement\n+export function useSongPracticeData(\n+  songId: string,\n+  interval: number,\n+  index: number\n+) {\n+  return useQuery({\n+    queryKey: ['songPracticeData', songId, interval, index],\n+    queryFn: () => getSongPracticeDataAction(songId, interval, index),\n+    enabled: !!songId,\n+    staleTime: 2 * 60 * 1000, // 2 minutes\n+    placeholderData: (previousData) => previousData,\n+  });\n+}\n+\n+// Hook pour précharger les données adjacentes\n+export function usePrefetchAdjacentData(\n+  songId: string,\n+  interval: number,\n+  currentIndex: number\n+) {\n+  const queryClient = useQueryClient();\n+\n+  const prefetchAdjacent = () => {\n+    // Précharger l'index précédent\n+    if (currentIndex > 0) {\n+      queryClient.prefetchQuery({\n+        queryKey: ['songPracticeData', songId, interval, currentIndex - 1],\n+        queryFn: () =>\n+          getSongPracticeDataAction(songId, interval, currentIndex - 1),\n+        staleTime: 2 * 60 * 1000,\n+      });\n+    }\n+\n+    // Précharger l'index suivant\n+    queryClient.prefetchQuery({\n+      queryKey: ['songPracticeData', songId, interval, currentIndex + 1],\n+      queryFn: () =>\n+        getSongPracticeDataAction(songId, interval, currentIndex + 1),\n+      staleTime: 2 * 60 * 1000,\n+    });\n+  };\n+\n+  return { prefetchAdjacent };\n+}\n+\n+// Hook pour les records timeline\n+export function useSongTimelineRecordsData(\n+  songId: string,\n+  mode: 'learning' | 'game'\n+) {\n+  return useQuery({\n+    queryKey: ['songTimelineRecordsData', songId, mode],\n+    queryFn: () => getSongTimelineRecordsDataAction(songId, mode),\n+    enabled: !!songId,\n+    staleTime: 5 * 60 * 1000, // 5 minutes\n+  });\n+}\n+\n+// Hook pour invalider le cache\n+export function useInvalidatePracticeCache() {\n+  const queryClient = useQueryClient();\n+\n+  const invalidateCache = (songId?: string) => {\n+    if (songId) {\n+      // Invalider seulement pour cette chanson\n+      queryClient.invalidateQueries({\n+        queryKey: ['songPracticeData', songId],\n+      });\n+      queryClient.invalidateQueries({\n+        queryKey: ['songPerformanceGeneralTiles', songId],\n+      });\n+      queryClient.invalidateQueries({\n+        queryKey: ['songLearningModeTiles', songId],\n+      });\n+      queryClient.invalidateQueries({\n+        queryKey: ['songPlayModeTiles', songId],\n+      });\n+      queryClient.invalidateQueries({\n+        queryKey: ['songLearningPrecisionData', songId],\n+      });\n+      queryClient.invalidateQueries({\n+        queryKey: ['songGamingLineChartData', songId],\n+      });\n+    } else {\n+      // Invalider tout le cache de pratique\n+      queryClient.invalidateQueries({\n+        queryKey: ['songPracticeData'],\n+      });\n+      queryClient.invalidateQueries({\n+        queryKey: ['songPerformanceGeneralTiles'],\n+      });\n+      queryClient.invalidateQueries({\n+        queryKey: ['songLearningModeTiles'],\n+      });\n+      queryClient.invalidateQueries({\n+        queryKey: ['songPlayModeTiles'],\n+      });\n+      queryClient.invalidateQueries({\n+        queryKey: ['songLearningPrecisionData'],\n+      });\n+      queryClient.invalidateQueries({\n+        queryKey: ['songGamingLineChartData'],\n+      });\n+    }\n+  };\n+\n+  const invalidatePracticeDataOnly = (songId?: string) => {\n+    if (songId) {\n+      // Invalider seulement les données de pratique (graphiques)\n+      queryClient.invalidateQueries({\n+        queryKey: ['songPracticeData', songId],\n+      });\n+    } else {\n+      queryClient.invalidateQueries({\n+        queryKey: ['songPracticeData'],\n+      });\n+    }\n+  };\n+\n+  const invalidatePrecisionDataOnly = (songId?: string) => {\n+    if (songId) {\n+      // Invalider seulement les données de précision\n+      queryClient.invalidateQueries({\n+        queryKey: ['songLearningPrecisionData', songId],\n+      });\n+    } else {\n+      queryClient.invalidateQueries({\n+        queryKey: ['songLearningPrecisionData'],\n+      });\n+    }\n+  };\n+\n+  const invalidatePerformanceDataOnly = (songId?: string) => {\n+    if (songId) {\n+      queryClient.invalidateQueries({\n+        queryKey: ['songLearningPerformanceData', songId],\n+      });\n+    } else {\n+      queryClient.invalidateQueries({\n+        queryKey: ['songLearningPerformanceData'],\n+      });\n+    }\n+  };\n+\n+  const invalidateGamingLineChartDataOnly = (songId?: string) => {\n+    if (songId) {\n+      queryClient.invalidateQueries({\n+        queryKey: ['songGamingLineChartData', songId],\n+      });\n+    } else {\n+      queryClient.invalidateQueries({\n+        queryKey: ['songGamingLineChartData'],\n+      });\n+    }\n+  };\n+\n+  return {\n+    invalidateCache,\n+    invalidatePracticeDataOnly,\n+    invalidatePrecisionDataOnly,\n+    invalidatePerformanceDataOnly,\n+    invalidateGamingLineChartDataOnly,\n+  };\n+}\n+\n+// Hook pour les tuiles d'apprentissage\n+export function useSongLearningModeTiles(songId: string) {\n+  return useQuery({\n+    queryKey: ['songLearningModeTiles', songId],\n+    queryFn: () => getSongLearningModeTilesAction(songId),\n+    enabled: !!songId,\n+  });\n+}\n+\n+// hook tuiles de jeu\n+export function useSongPlayModeTiles(songId: string) {\n+  return useQuery({\n+    queryKey: ['songPlayModeTiles', songId],\n+    queryFn: () => getSongPlayModeTilesAction(songId),\n+    enabled: !!songId,\n+  });\n+}\n+\n+// Hook pour les données de précision d'apprentissage\n+export function useSongLearningPrecisionData(\n+  songId: string,\n+  interval: number,\n+  index: number\n+) {\n+  return useQuery({\n+    queryKey: ['songLearningPrecisionData', songId, interval, index],\n+    queryFn: () => getSongLearningPrecisionDataAction(songId, interval, index),\n+    enabled: !!songId,\n+    staleTime: 2 * 60 * 1000, // 2 minutes\n+    placeholderData: (previousData) => previousData,\n+  });\n+}\n+\n+// Hook pour précharger les données de précision adjacentes\n+export function usePrefetchLearningPrecisionData(\n+  songId: string,\n+  interval: number,\n+  currentIndex: number\n+) {\n+  const queryClient = useQueryClient();\n+\n+  const prefetchAdjacent = () => {\n+    // Précharger l'index précédent\n+    if (currentIndex > 0) {\n+      queryClient.prefetchQuery({\n+        queryKey: [\n+          'songLearningPrecisionData',\n+          songId,\n+          interval,\n+          currentIndex - 1,\n+        ],\n+        queryFn: () =>\n+          getSongLearningPrecisionDataAction(\n+            songId,\n+            interval,\n+            currentIndex - 1\n+          ),\n+        staleTime: 2 * 60 * 1000,\n+      });\n+    }\n+\n+    // Précharger l'index suivant\n+    queryClient.prefetchQuery({\n+      queryKey: [\n+        'songLearningPrecisionData',\n+        songId,\n+        interval,\n+        currentIndex + 1,\n+      ],\n+      queryFn: () =>\n+        getSongLearningPrecisionDataAction(songId, interval, currentIndex + 1),\n+      staleTime: 2 * 60 * 1000,\n+    });\n+  };\n+\n+  return { prefetchAdjacent };\n+}\n+\n+export function useSongLearningPerformanceData(\n+  songId: string,\n+  interval: number,\n+  index: number\n+) {\n+  return useQuery({\n+    queryKey: ['songLearningPerformanceData', songId, interval, index],\n+    queryFn: () =>\n+      getSongLearningPerformanceDataAction(songId, interval, index),\n+    enabled: !!songId,\n+    staleTime: 2 * 60 * 1000, // 2 minutes\n+    placeholderData: (previousData) => previousData,\n+  });\n+}\n+\n+export function usePrefetchLearningPerformanceData(\n+  songId: string,\n+  interval: number,\n+  currentIndex: number\n+) {\n+  const queryClient = useQueryClient();\n+\n+  const prefetchAdjacent = () => {\n+    // Précharger l'index précédent\n+    if (currentIndex > 0) {\n+      queryClient.prefetchQuery({\n+        queryKey: [\n+          'songLearningPerformanceData',\n+          songId,\n+          interval,\n+          currentIndex - 1,\n+        ],\n+        queryFn: () =>\n+          getSongLearningPerformanceDataAction(\n+            songId,\n+            interval,\n+            currentIndex - 1\n+          ),\n+        staleTime: 2 * 60 * 1000,\n+      });\n+    }\n+\n+    // Précharger l'index suivant\n+    queryClient.prefetchQuery({\n+      queryKey: [\n+        'songLearningPerformanceData',\n+        songId,\n+        interval,\n+        currentIndex + 1,\n+      ],\n+      queryFn: () =>\n+        getSongLearningPerformanceDataAction(\n+          songId,\n+          interval,\n+          currentIndex + 1\n+        ),\n+      staleTime: 2 * 60 * 1000,\n+    });\n+  };\n+\n+  return { prefetchAdjacent };\n+}\n+\n+// Hook pour les données de bar chart précision/performance\n+export function useSongPerformancePrecisionBarChartData(\n+  songId: string,\n+  index: number\n+) {\n+  return useQuery({\n+    queryKey: ['songPerformancePrecisionBarChartData', songId, index],\n+    queryFn: () => getSongPerformancePrecisionBarChartDataAction(songId, index),\n+    enabled: !!songId,\n+    staleTime: 5 * 60 * 1000,\n+    placeholderData: (previousData) => previousData,\n+  });\n+}\n+\n+// Hook pour précharger les données de bar chart adjacentes\n+export function usePrefetchPerformancePrecisionBarChartData(\n+  songId: string,\n+  currentIndex: number\n+) {\n+  const queryClient = useQueryClient();\n+\n+  const prefetchAdjacent = () => {\n+    // Précharger l'index précédent\n+    if (currentIndex > 0) {\n+      queryClient.prefetchQuery({\n+        queryKey: [\n+          'songPerformancePrecisionBarChartData',\n+          songId,\n+          currentIndex - 1,\n+        ],\n+        queryFn: () =>\n+          getSongPerformancePrecisionBarChartDataAction(\n+            songId,\n+            currentIndex - 1\n+          ),\n+        staleTime: 5 * 60 * 1000,\n+      });\n+    }\n+\n+    // Précharger l'index suivant\n+    queryClient.prefetchQuery({\n+      queryKey: [\n+        'songPerformancePrecisionBarChartData',\n+        songId,\n+        currentIndex + 1,\n+      ],\n+      queryFn: () =>\n+        getSongPerformancePrecisionBarChartDataAction(songId, currentIndex + 1),\n+      staleTime: 5 * 60 * 1000,\n+    });\n+  };\n+\n+  return { prefetchAdjacent };\n+}\n+\n+export function useSongGamingLineChartData(\n+  songId: string,\n+  index: number,\n+  interval: number\n+) {\n+  return useQuery({\n+    queryKey: ['songGamingLineChartData', songId, index, interval],\n+    queryFn: () => getSongGamingLineChartDataAction(songId, index, interval),\n+    enabled: !!songId,\n+    staleTime: 2 * 60 * 1000,\n+    placeholderData: (previousData) => previousData,\n+  });\n+}\n+\n+export function usePrefetchGamingLineChartData(\n+  songId: string,\n+  interval: number,\n+  currentIndex: number\n+) {\n+  const queryClient = useQueryClient();\n+\n+  const prefetchAdjacent = () => {\n+    // Précharger l'index précédent\n+    if (currentIndex > 0) {\n+      queryClient.prefetchQuery({\n+        queryKey: [\n+          'songGamingLineChartData',\n+          songId,\n+          currentIndex - 1,\n+          interval,\n+        ],\n+        queryFn: () =>\n+          getSongGamingLineChartDataAction(songId, currentIndex - 1, interval),\n+        staleTime: 2 * 60 * 1000,\n+      });\n+    }\n+\n+    // Précharger l'index suivant\n+    queryClient.prefetchQuery({\n+      queryKey: ['songGamingLineChartData', songId, currentIndex + 1, interval],\n+      queryFn: () =>\n+        getSongGamingLineChartDataAction(songId, currentIndex + 1, interval),\n+      staleTime: 2 * 60 * 1000,\n+    });\n+  };\n+\n+  return { prefetchAdjacent };\n+}\n+\n+export function useSongGamingBarChartData(songId: string, index: number) {\n+  return useQuery({\n+    queryKey: ['songGamingBarChartData', songId, index],\n+    queryFn: () => getSongGamingBarChartDataAction(songId, index),\n+    enabled: !!songId,\n+    staleTime: 5 * 60 * 1000,\n+    placeholderData: (previousData) => previousData,\n+  });\n+}\n+\n+export function usePrefetchGamingBarChartData(\n+  songId: string,\n+  currentIndex: number\n+) {\n+  const queryClient = useQueryClient();\n+\n+  const prefetchAdjacent = () => {\n+    // Précharger l'index précédent\n+    if (currentIndex > 0) {\n+      queryClient.prefetchQuery({\n+        queryKey: ['songGamingBarChartData', songId, currentIndex - 1],\n+        queryFn: () =>\n+          getSongGamingBarChartDataAction(songId, currentIndex - 1),\n+        staleTime: 5 * 60 * 1000,\n+      });\n+    }\n+\n+    // Précharger l'index suivant\n+    queryClient.prefetchQuery({\n+      queryKey: ['songGamingBarChartData', songId, currentIndex + 1],\n+      queryFn: () => getSongGamingBarChartDataAction(songId, currentIndex + 1),\n+      staleTime: 5 * 60 * 1000,\n+    });\n+  };\n+\n+  return { prefetchAdjacent };\n+}"
  },
  {
    "sha": "0608e5b071dcc6ec92e39171a7e4d320b9d9572a",
    "filename": "virtuo-piano/src/features/layout/Header.tsx",
    "status": "modified",
    "additions": 31,
    "deletions": 4,
    "changes": 35,
    "blob_url": "https://github.com/Tfe-VirtuoPiano/www/blob/f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33/virtuo-piano%2Fsrc%2Ffeatures%2Flayout%2FHeader.tsx",
    "raw_url": "https://github.com/Tfe-VirtuoPiano/www/raw/f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33/virtuo-piano%2Fsrc%2Ffeatures%2Flayout%2FHeader.tsx",
    "contents_url": "https://api.github.com/repos/Tfe-VirtuoPiano/www/contents/virtuo-piano%2Fsrc%2Ffeatures%2Flayout%2FHeader.tsx?ref=f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33",
    "patch": "@@ -1,25 +1,52 @@\n 'use client';\n \n import { usePathname } from 'next/navigation';\n+import { useEffect, useState } from 'react';\n import styles from './Header.module.css';\n import { getPageName } from '@/common/utils/function';\n import { useSong } from '@/contexts/SongContext';\n \n export default function Header() {\n   const pathname = usePathname();\n   const { currentSong } = useSong();\n+  const [isLoadingSong, setIsLoadingSong] = useState(false);\n \n-  // Utiliser le titre de la chanson si disponible, sinon utiliser le nom de la page\n-  const pageTitle = currentSong ? currentSong.title : getPageName(pathname);\n+  // Détecter si nous sommes sur une page de chanson\n+  const isSongPage =\n+    pathname.startsWith('/library/') && pathname !== '/library';\n+  const isPerformancePage = pathname.startsWith('/performances/');\n+\n+  useEffect(() => {\n+    if (isSongPage || isPerformancePage) {\n+      // Si nous sommes sur une page de chanson mais qu'aucune chanson n'est chargée\n+      if (!currentSong) {\n+        setIsLoadingSong(true);\n+      } else {\n+        setIsLoadingSong(false);\n+      }\n+    } else {\n+      setIsLoadingSong(false);\n+    }\n+  }, [currentSong, isSongPage, isPerformancePage]);\n+\n+  // Déterminer le titre à afficher\n+  const getDisplayTitle = () => {\n+    if ((isSongPage || isPerformancePage) && isLoadingSong) {\n+      return 'Chargement...';\n+    }\n+    return currentSong ? currentSong.title : getPageName(pathname);\n+  };\n \n   // Afficher le compositeur si disponible\n   const composer = currentSong?.composer || '';\n \n   return (\n     <div className={styles.header}>\n       <h1 className={styles.pageTitle}>\n-        {pageTitle}\n-        {composer && <span className={styles.composer}> {composer}</span>}\n+        {getDisplayTitle()}\n+        {composer && !isLoadingSong && (\n+          <span className={styles.composer}> {composer}</span>\n+        )}\n       </h1>\n     </div>\n   );"
  },
  {
    "sha": "ebdb95bab96fa96e9e771ce6e1bf3841a0a685ea",
    "filename": "virtuo-piano/src/features/library/Song.tsx",
    "status": "modified",
    "additions": 9,
    "deletions": 3,
    "changes": 12,
    "blob_url": "https://github.com/Tfe-VirtuoPiano/www/blob/f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33/virtuo-piano%2Fsrc%2Ffeatures%2Flibrary%2FSong.tsx",
    "raw_url": "https://github.com/Tfe-VirtuoPiano/www/raw/f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33/virtuo-piano%2Fsrc%2Ffeatures%2Flibrary%2FSong.tsx",
    "contents_url": "https://api.github.com/repos/Tfe-VirtuoPiano/www/contents/virtuo-piano%2Fsrc%2Ffeatures%2Flibrary%2FSong.tsx?ref=f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33",
    "patch": "@@ -23,7 +23,7 @@ import DifficultyBadge from '@/components/DifficultyBadge';\n import SongTypeBadge from '@/components/SongTypeBadge';\n import { useRouter } from 'next/navigation';\n import { toast } from 'react-hot-toast';\n-import { Spinner } from '@/components/ui/spinner';\n+import { SongBasicData } from '@/lib/types';\n \n export default function Song({\n   song,\n@@ -53,7 +53,7 @@ export default function Song({\n \n   useEffect(() => {\n     // Mettre à jour le contexte avec la chanson actuelle\n-    setCurrentSong(song);\n+    setCurrentSong(song as SongBasicData);\n \n     // Nettoyer le contexte lorsque le composant est démonté\n     return () => {\n@@ -290,7 +290,13 @@ export default function Song({\n       {/* En-tête du morceau */}\n \n       <div className={styles.header}>\n-        <div className={styles.headerGradient}>\n+        <div\n+          className={styles.headerGradient}\n+          style={{\n+            background:\n+              'linear-gradient(to right, rgba(59, 130, 246, 0.2), rgba(99, 102, 241, 0.2), rgba(251, 146, 60, 0.2))',\n+          }}\n+        >\n           <div className={styles.headerContent}>\n             <div className={styles.songImage}>\n               {song.imageUrl ? ("
  },
  {
    "sha": "c2aba2875b9583734eb8a1e1e3b3e2ef94d03c0a",
    "filename": "virtuo-piano/src/features/performances/HistoryStats.tsx",
    "status": "modified",
    "additions": 55,
    "deletions": 6,
    "changes": 61,
    "blob_url": "https://github.com/Tfe-VirtuoPiano/www/blob/f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33/virtuo-piano%2Fsrc%2Ffeatures%2Fperformances%2FHistoryStats.tsx",
    "raw_url": "https://github.com/Tfe-VirtuoPiano/www/raw/f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33/virtuo-piano%2Fsrc%2Ffeatures%2Fperformances%2FHistoryStats.tsx",
    "contents_url": "https://api.github.com/repos/Tfe-VirtuoPiano/www/contents/virtuo-piano%2Fsrc%2Ffeatures%2Fperformances%2FHistoryStats.tsx?ref=f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33",
    "patch": "@@ -23,18 +23,37 @@ type SessionsResult = {\n };\n \n export default function HistoryStats() {\n+  // Lire les filtres depuis sessionStorage au mount\n+  const getInitialFilters = () => {\n+    if (typeof window !== 'undefined') {\n+      const savedFilters = sessionStorage.getItem('historyFilters');\n+      if (savedFilters) {\n+        sessionStorage.removeItem('historyFilters'); // Nettoyer après lecture\n+        return JSON.parse(savedFilters);\n+      }\n+    }\n+    return { searchQuery: '', composerFilter: '', modeFilter: 'all' };\n+  };\n+\n+  const initialFilters = getInitialFilters();\n+\n+  // Initialiser les filtres\n+  const [searchQuery, setSearchQuery] = useState(initialFilters.searchQuery);\n+  const [composerFilter, setComposerFilter] = useState(\n+    initialFilters.composerFilter\n+  );\n+  const [modeFilter, setModeFilter] = useState<'all' | 'learning' | 'game'>(\n+    initialFilters.modeFilter || 'all'\n+  );\n+\n   const [allScores, setAllScores] = useState<ScoreSummary[]>([]);\n   const [loading, setLoading] = useState(true);\n   const [loadingMore, setLoadingMore] = useState(false);\n   const [error, setError] = useState<string | null>(null);\n-  const [searchQuery, setSearchQuery] = useState('');\n   const [dateFilter, setDateFilter] = useState('all');\n   const [customStartDate, setCustomStartDate] = useState('');\n   const [customEndDate, setCustomEndDate] = useState('');\n   const [showDateFilters, setShowDateFilters] = useState(false);\n-  const [modeFilter, setModeFilter] = useState<'all' | 'learning' | 'game'>(\n-    'all'\n-  );\n   const [onlyCompleted, setOnlyCompleted] = useState(false);\n   const [hasMore, setHasMore] = useState(true);\n   const [total, setTotal] = useState(0);\n@@ -51,6 +70,7 @@ export default function HistoryStats() {\n   } = useSearchCache<SessionsResult>({\n     filters: {\n       search: searchQuery.trim(),\n+      composer: composerFilter.trim(),\n       mode: modeFilter,\n       completed: modeFilter === 'learning' ? onlyCompleted : false,\n       dateFilter,\n@@ -81,8 +101,22 @@ export default function HistoryStats() {\n       } = await getFilteredSessions(filters, pagination);\n \n       if (success) {\n+        // Filtrage côté client pour titre ET compositeur si spécifiés\n+        let filteredData = data;\n+        if (searchQuery.trim() && composerFilter.trim()) {\n+          filteredData = data.filter(\n+            (session) =>\n+              session.songTitle\n+                .toLowerCase()\n+                .includes(searchQuery.toLowerCase()) &&\n+              (session.songComposer || '')\n+                .toLowerCase()\n+                .includes(composerFilter.toLowerCase())\n+          );\n+        }\n+\n         return {\n-          sessions: data,\n+          sessions: filteredData,\n           hasMore: newHasMore,\n           total: newTotal,\n         };\n@@ -117,6 +151,7 @@ export default function HistoryStats() {\n   // Fonction pour réinitialiser tous les filtres\n   const resetAllFilters = () => {\n     setSearchQuery('');\n+    setComposerFilter('');\n     setDateFilter('all');\n     setCustomStartDate('');\n     setCustomEndDate('');\n@@ -151,8 +186,22 @@ export default function HistoryStats() {\n         } = await getFilteredSessions(filters, pagination);\n \n         if (success) {\n+          // Filtrage côté client pour titre ET compositeur si spécifiés\n+          let filteredData = data;\n+          if (searchQuery.trim() && composerFilter.trim()) {\n+            filteredData = data.filter(\n+              (session) =>\n+                session.songTitle\n+                  .toLowerCase()\n+                  .includes(searchQuery.toLowerCase()) &&\n+                (session.songComposer || '')\n+                  .toLowerCase()\n+                  .includes(composerFilter.toLowerCase())\n+            );\n+          }\n+\n           // Créer les nouvelles données avec toutes les sessions\n-          const updatedSessions = [...allScores, ...data];\n+          const updatedSessions = [...allScores, ...filteredData];\n           const newSessionsData = {\n             sessions: updatedSessions,\n             hasMore: newHasMore,"
  },
  {
    "sha": "37e2998455e1dd30dfbf9909fe7112d8fc38b982",
    "filename": "virtuo-piano/src/features/performances/PlayedSongs.tsx",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/Tfe-VirtuoPiano/www/blob/f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33/virtuo-piano%2Fsrc%2Ffeatures%2Fperformances%2FPlayedSongs.tsx",
    "raw_url": "https://github.com/Tfe-VirtuoPiano/www/raw/f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33/virtuo-piano%2Fsrc%2Ffeatures%2Fperformances%2FPlayedSongs.tsx",
    "contents_url": "https://api.github.com/repos/Tfe-VirtuoPiano/www/contents/virtuo-piano%2Fsrc%2Ffeatures%2Fperformances%2FPlayedSongs.tsx?ref=f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33",
    "patch": "@@ -191,7 +191,7 @@ export default function PlayedSongs() {\n   };\n \n   const handleSongClick = (songId: string) => {\n-    router.push(`/library/${songId}`);\n+    router.push(`/performances/${songId}`);\n   };\n \n   // Les chansons sont déjà filtrées côté serveur"
  },
  {
    "sha": "63a14fe431391161a07d6595a0af36bf21ab6ffb",
    "filename": "virtuo-piano/src/features/performances/SessionCard.tsx",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/Tfe-VirtuoPiano/www/blob/f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33/virtuo-piano%2Fsrc%2Ffeatures%2Fperformances%2FSessionCard.tsx",
    "raw_url": "https://github.com/Tfe-VirtuoPiano/www/raw/f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33/virtuo-piano%2Fsrc%2Ffeatures%2Fperformances%2FSessionCard.tsx",
    "contents_url": "https://api.github.com/repos/Tfe-VirtuoPiano/www/contents/virtuo-piano%2Fsrc%2Ffeatures%2Fperformances%2FSessionCard.tsx?ref=f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33",
    "patch": "@@ -1,5 +1,5 @@\n import React from 'react';\n-import { SessionDetail } from '@/lib/services/performances-services';\n+import { SessionDetail } from '@/lib/types';\n import { formatDuration } from '@/common/utils/function';\n import { sessionCardStyles } from './SessionCard.styles';\n "
  },
  {
    "sha": "7083802844e1d06783f30a16539841756add8aa2",
    "filename": "virtuo-piano/src/features/performances/SongPerformances.tsx",
    "status": "added",
    "additions": 287,
    "deletions": 0,
    "changes": 287,
    "blob_url": "https://github.com/Tfe-VirtuoPiano/www/blob/f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33/virtuo-piano%2Fsrc%2Ffeatures%2Fperformances%2FSongPerformances.tsx",
    "raw_url": "https://github.com/Tfe-VirtuoPiano/www/raw/f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33/virtuo-piano%2Fsrc%2Ffeatures%2Fperformances%2FSongPerformances.tsx",
    "contents_url": "https://api.github.com/repos/Tfe-VirtuoPiano/www/contents/virtuo-piano%2Fsrc%2Ffeatures%2Fperformances%2FSongPerformances.tsx?ref=f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33",
    "patch": "@@ -0,0 +1,287 @@\n+'use client';\n+\n+import { useEffect, useState, useTransition } from 'react';\n+import { useSong } from '@/contexts/SongContext';\n+import { useRouter } from 'next/navigation';\n+import { castMsToMin } from '@/common/utils/function';\n+import {\n+  IconMusic,\n+  IconHeart,\n+  IconClock,\n+  IconChartBar,\n+  IconChevronRight,\n+  IconTimeline,\n+  IconBrain,\n+} from '@tabler/icons-react';\n+\n+import React from 'react';\n+import styles from '../library/Song.module.css';\n+import { toggleFavorite } from '@/lib/actions/songs';\n+import DifficultyBadge from '@/components/DifficultyBadge';\n+import { toast } from 'react-hot-toast';\n+import { SongBasicData } from '@/lib/types';\n+\n+import RecentSessionsByMode from './components/RecentSessionsByMode';\n+\n+// Données et utilitaires\n+\n+import LearningTiles from './components/LearningTiles';\n+import PracticeGraph from './components/PracticeGraph';\n+import GeneralTiles from './components/GeneralTiles';\n+import GamingTiles from './components/GamingTiles';\n+import PrecisionChart from './components/PrecisionChart';\n+import PerformanceChart from './components/PerformanceChart';\n+import PerformancePrecisionBarChart from './components/PerformancePrecisionBarChart';\n+import GamingLineChart from './components/GamingLineChart';\n+import GamingBarChart from './components/GamingBarChart';\n+import LearningTimeline from './components/LearningTimeline';\n+import GamingTimeline from './components/GamingTimeline';\n+\n+export default function SongPerformances({ song }: { song: SongBasicData }) {\n+  const { setCurrentSong } = useSong();\n+  const router = useRouter();\n+  const [isFavorite, setIsFavorite] = useState(song.isFavorite || false);\n+  const [isPending, startTransition] = useTransition();\n+  const [activeTab, setActiveTab] = useState<'apprentissage' | 'jeu'>(\n+    'apprentissage'\n+  );\n+\n+  // Données étendues\n+\n+  useEffect(() => {\n+    setCurrentSong(song);\n+    return () => setCurrentSong(null);\n+  }, [song, setCurrentSong]);\n+\n+  // Gestion des favoris\n+  const handleFavoriteClick = () => {\n+    setIsFavorite(!isFavorite);\n+    startTransition(async () => {\n+      try {\n+        const result = await toggleFavorite(song.id);\n+        if (result.success) {\n+          toast.success(result.message);\n+        } else {\n+          setIsFavorite(isFavorite);\n+          toast.error(result.message);\n+        }\n+      } catch (error) {\n+        console.error('Erreur lors de la modification des favoris:', error);\n+        setIsFavorite(isFavorite);\n+        toast.error(\n+          'Une erreur est survenue lors de la modification des favoris'\n+        );\n+      }\n+    });\n+  };\n+\n+  // Navigation\n+  const handleBackToPlayedSongs = () => {\n+    router.push('/performances?tab=playedSongs');\n+  };\n+\n+  return (\n+    <div className={styles.container}>\n+      {/* En-tête du morceau */}\n+      <div className={styles.header}>\n+        <div\n+          className={styles.headerGradient}\n+          style={{\n+            background:\n+              'linear-gradient(to right, rgba(59, 130, 246, 0.2), rgba(99, 102, 241, 0.2), rgba(251, 146, 60, 0.2))',\n+          }}\n+        >\n+          <div className=\"absolute top-4 right-4 z-10\">\n+            <button\n+              onClick={handleBackToPlayedSongs}\n+              className=\"text-md cursor-pointer text-indigo-400 hover:text-indigo-300 font-medium flex items-center relative hover:after:w-[calc(100%-1rem)] after:absolute after:bottom-0 after:left-0 after:h-px after:bg-current after:transition-all after:duration-300 after:ease-out after:w-0\"\n+            >\n+              Retour aux chansons jouées\n+              <IconChevronRight size={18} className=\"ml-1\" />\n+            </button>\n+          </div>\n+\n+          <div className={styles.headerContent}>\n+            <div className={styles.songImage}>\n+              {song.imageUrl ? (\n+                <img\n+                  src={song.imageUrl}\n+                  alt={song.title}\n+                  className=\"h-full w-full object-cover\"\n+                />\n+              ) : (\n+                <IconMusic size={36} className={styles.similarSongIconText} />\n+              )}\n+            </div>\n+\n+            <div className={styles.songInfo}>\n+              <div className=\"flex items-start\">\n+                <div>\n+                  <h1 className={styles.songTitle}>{song.title}</h1>\n+                  <p className={styles.songComposer}>\n+                    {song.composer || 'Compositeur inconnu'}\n+                  </p>\n+                </div>\n+\n+                <button\n+                  onClick={handleFavoriteClick}\n+                  className={`${styles.favoriteButton} ml-3 ${\n+                    isFavorite ? styles.favoriteActive : ''\n+                  }`}\n+                  disabled={isPending}\n+                >\n+                  <IconHeart\n+                    size={41}\n+                    fill={isFavorite ? 'currentColor' : 'none'}\n+                  />\n+                </button>\n+              </div>\n+\n+              <div className={styles.songMeta}>\n+                <div className={styles.metaBadge}>\n+                  <IconClock size={14} className={styles.metaIcon} />\n+                  <span>{castMsToMin(song.duration_ms)}</span>\n+                </div>\n+                <div className={styles.metaBadge}>\n+                  <IconChartBar size={14} className={styles.metaIcon} />\n+                  <span>{song.tempo} BPM</span>\n+                </div>\n+                <div className={styles.metaBadge}>\n+                  <IconMusic size={14} className={styles.metaIcon} />\n+                  <span>{song.genre || 'Non spécifié'}</span>\n+                </div>\n+                <DifficultyBadge difficulty={song.Level} />\n+              </div>\n+            </div>\n+          </div>\n+        </div>\n+      </div>\n+\n+      <div className={styles.tabContent}>\n+        {/* Première section avec graphique principal et tuiles */}\n+        <div className=\"grid grid-cols-1 pb-4 md:grid-cols-3 lg:grid-cols-4 gap-4 auto-rows-auto\">\n+          {/* Graphique principal de pratique */}\n+          <PracticeGraph songId={song.id} />\n+          {/* Tuiles d'informations */}\n+          <GeneralTiles songId={song.id} />\n+        </div>\n+\n+        {/* Onglets */}\n+        <div className=\"mt-12\">\n+          <div className=\"flex items-center justify-center mb-8\">\n+            <nav className=\"flex space-x-8\">\n+              <button\n+                onClick={() => setActiveTab('apprentissage')}\n+                className={`relative flex items-center px-4 py-3 font-medium transition-all duration-300 group ${\n+                  activeTab === 'apprentissage'\n+                    ? 'text-blue-400'\n+                    : 'text-slate-400 hover:text-slate-300'\n+                }`}\n+              >\n+                <IconBrain\n+                  size={18}\n+                  className=\"mr-2 transition-transform duration-300 group-hover:scale-110\"\n+                />\n+                <span className=\"text-sm font-semibold tracking-wide\">\n+                  Mode Apprentissage\n+                </span>\n+                {activeTab === 'apprentissage' && (\n+                  <div className=\"absolute bottom-0 left-0 right-0 h-0.5 bg-gradient-to-r from-blue-400 to-indigo-500 rounded-full animate-in slide-in-from-bottom-2 duration-300\" />\n+                )}\n+                {activeTab !== 'apprentissage' && (\n+                  <div className=\"absolute bottom-0 left-0 right-0 h-0.5 bg-slate-600 opacity-0 group-hover:opacity-50 transition-opacity duration-300 rounded-full\" />\n+                )}\n+              </button>\n+              <button\n+                onClick={() => setActiveTab('jeu')}\n+                className={`relative flex items-center px-4 py-3 font-medium transition-all duration-300 group ${\n+                  activeTab === 'jeu'\n+                    ? 'text-orange-400'\n+                    : 'text-slate-400 hover:text-slate-300'\n+                }`}\n+              >\n+                <IconChartBar\n+                  size={18}\n+                  className=\"mr-2 transition-transform duration-300 group-hover:scale-110\"\n+                />\n+                <span className=\"text-sm font-semibold tracking-wide\">\n+                  Mode Jeu\n+                </span>\n+                {activeTab === 'jeu' && (\n+                  <div className=\"absolute bottom-0 left-0 right-0 h-0.5 bg-gradient-to-r from-orange-400 to-red-500 rounded-full animate-in slide-in-from-bottom-2 duration-300\" />\n+                )}\n+                {activeTab !== 'jeu' && (\n+                  <div className=\"absolute bottom-0 left-0 right-0 h-0.5 bg-slate-600 opacity-0 group-hover:opacity-50 transition-opacity duration-300 rounded-full\" />\n+                )}\n+              </button>\n+            </nav>\n+          </div>\n+\n+          {/* Contenu des onglets */}\n+          {activeTab === 'apprentissage' && (\n+            <div className=\"animate-in fade-in slide-in-from-right-8 duration-500\">\n+              {/* Timeline Apprentissage */}\n+              <div className=\"bg-white/5 backdrop-blur-sm rounded-xl p-6 border border-white/10 mb-8\">\n+                <h3 className=\"text-lg font-semibold text-white flex items-center mb-4\">\n+                  <IconTimeline size={20} className=\"mr-2 text-yellow-400\" />\n+                  Ligne du temps des records\n+                </h3>\n+                <LearningTimeline songId={song.id} />\n+              </div>\n+\n+              {/* Layout avec tuiles et graphiques */}\n+              <div className=\"grid grid-cols-12 gap-6 mb-8\">\n+                {/* Tuiles à gauche */}\n+                <LearningTiles songId={song.id} />\n+\n+                {/* Graphique Précision */}\n+                <PrecisionChart songId={song.id} />\n+              </div>\n+\n+              {/* Graphique Performance et graphique en barres */}\n+              <div className=\"grid grid-cols-12 gap-6\">\n+                <PerformanceChart songId={song.id} />\n+                {/* Graphique à barres Précision & Performance */}\n+                <PerformancePrecisionBarChart songId={song.id} />\n+              </div>\n+              <RecentSessionsByMode\n+                songTitle={song.title}\n+                songComposer={song.composer || ''}\n+                mode=\"learning\"\n+              />\n+            </div>\n+          )}\n+\n+          {activeTab === 'jeu' && (\n+            <div className=\"animate-in fade-in slide-in-from-left-8 duration-500\">\n+              {/* Timeline Jeu */}\n+              <div className=\"bg-white/5 backdrop-blur-sm rounded-xl p-6 border border-white/10 mb-8\">\n+                <h3 className=\"text-lg font-semibold text-white flex items-center mb-4\">\n+                  <IconTimeline size={20} className=\"mr-2 text-orange-400\" />\n+                  Ligne du temps des records\n+                </h3>\n+                <GamingTimeline songId={song.id} />\n+              </div>\n+\n+              {/* Tuiles d'infos */}\n+              <GamingTiles songId={song.id} />\n+              {/* Graphiques côte à côte */}\n+              <div className=\"grid grid-cols-12 gap-6\">\n+                {/* Graphique Score multi-axes */}\n+                <GamingLineChart songId={song.id} />\n+\n+                {/* Graphique à barres Score, combo & multiplicateur */}\n+                <GamingBarChart songId={song.id} />\n+              </div>\n+              <RecentSessionsByMode\n+                songTitle={song.title}\n+                songComposer={song.composer || ''}\n+                mode=\"game\"\n+              />\n+            </div>\n+          )}\n+        </div>\n+      </div>\n+    </div>\n+  );\n+}"
  },
  {
    "sha": "3268f84e9955d76d959d98e00130bb48e206be69",
    "filename": "virtuo-piano/src/features/performances/StartedSongsTile.tsx",
    "status": "modified",
    "additions": 4,
    "deletions": 1,
    "changes": 5,
    "blob_url": "https://github.com/Tfe-VirtuoPiano/www/blob/f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33/virtuo-piano%2Fsrc%2Ffeatures%2Fperformances%2FStartedSongsTile.tsx",
    "raw_url": "https://github.com/Tfe-VirtuoPiano/www/raw/f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33/virtuo-piano%2Fsrc%2Ffeatures%2Fperformances%2FStartedSongsTile.tsx",
    "contents_url": "https://api.github.com/repos/Tfe-VirtuoPiano/www/contents/virtuo-piano%2Fsrc%2Ffeatures%2Fperformances%2FStartedSongsTile.tsx?ref=f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33",
    "patch": "@@ -84,7 +84,10 @@ export default function StartedSongsTile() {\n               }`,\n               isPositive: startedSongsData.trend === 'increase',\n             }\n-          : undefined\n+          : {\n+              value: 'Aucun changement',\n+              isPositive: true,\n+            }\n       }\n       showIntervalSelector={true}\n       selectedInterval={selectedInterval}"
  },
  {
    "sha": "d52e4e99ab72bafbe844b1ad79645909f24aa06e",
    "filename": "virtuo-piano/src/features/performances/components/GamingBarChart.tsx",
    "status": "added",
    "additions": 69,
    "deletions": 0,
    "changes": 69,
    "blob_url": "https://github.com/Tfe-VirtuoPiano/www/blob/f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33/virtuo-piano%2Fsrc%2Ffeatures%2Fperformances%2Fcomponents%2FGamingBarChart.tsx",
    "raw_url": "https://github.com/Tfe-VirtuoPiano/www/raw/f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33/virtuo-piano%2Fsrc%2Ffeatures%2Fperformances%2Fcomponents%2FGamingBarChart.tsx",
    "contents_url": "https://api.github.com/repos/Tfe-VirtuoPiano/www/contents/virtuo-piano%2Fsrc%2Ffeatures%2Fperformances%2Fcomponents%2FGamingBarChart.tsx?ref=f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33",
    "patch": "@@ -0,0 +1,69 @@\n+import { IconChartBar } from '@tabler/icons-react';\n+import BarChartWithNavigation from '../../../components/charts/BarChartWithNavigation';\n+import { useEffect, useState } from 'react';\n+import {\n+  usePrefetchGamingBarChartData,\n+  useSongGamingBarChartData,\n+} from '@/customHooks/useSongPerformances';\n+\n+export default function GamingBarChart({ songId }: { songId: string }) {\n+  const [gameBarIndex, setGameBarIndex] = useState(0);\n+  const {\n+    data: gamingBarResult,\n+    isLoading: gamingBarLoading,\n+    error: gamingBarError,\n+  } = useSongGamingBarChartData(songId, gameBarIndex);\n+\n+  const { prefetchAdjacent } = usePrefetchGamingBarChartData(\n+    songId,\n+    gameBarIndex\n+  );\n+\n+  useEffect(() => {\n+    prefetchAdjacent();\n+  }, [songId, gameBarIndex, prefetchAdjacent]);\n+\n+  const gameBars = [\n+    {\n+      dataKey: 'score',\n+      color: '#6366f1',\n+      name: 'Meilleur score',\n+      yAxisId: 'score',\n+    },\n+    { dataKey: 'combo', color: '#f59e0b', name: 'Combo max', yAxisId: 'combo' },\n+    {\n+      dataKey: 'multi',\n+      color: '#10b981',\n+      name: 'Multiplicateur max',\n+      yAxisId: 'multi',\n+    },\n+  ];\n+\n+  const intervals = gamingBarResult?.data\n+    ? [\n+        {\n+          label: gamingBarResult.data.label,\n+          data: gamingBarResult.data.data,\n+        },\n+      ]\n+    : [];\n+  return (\n+    <div className=\"col-span-12 lg:col-span-6\">\n+      <BarChartWithNavigation\n+        maxIntervals={gamingBarResult?.data?.totalIntervals || 0}\n+        isLoading={gamingBarLoading}\n+        error={gamingBarError}\n+        title=\"Score, combo & multiplicateur par mois\"\n+        icon={<IconChartBar size={20} className=\"mr-2 text-orange-400\" />}\n+        intervals={intervals}\n+        bars={gameBars}\n+        index={gameBarIndex}\n+        onIndexChange={setGameBarIndex}\n+        height={320}\n+        themeColor=\"text-orange-400\"\n+        multiAxis={true}\n+        yAxisDomain={[0, 100]}\n+      />\n+    </div>\n+  );\n+}"
  },
  {
    "sha": "9379a0f9469396a259932407ade96df5c277d882",
    "filename": "virtuo-piano/src/features/performances/components/GamingLineChart.tsx",
    "status": "added",
    "additions": 128,
    "deletions": 0,
    "changes": 128,
    "blob_url": "https://github.com/Tfe-VirtuoPiano/www/blob/f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33/virtuo-piano%2Fsrc%2Ffeatures%2Fperformances%2Fcomponents%2FGamingLineChart.tsx",
    "raw_url": "https://github.com/Tfe-VirtuoPiano/www/raw/f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33/virtuo-piano%2Fsrc%2Ffeatures%2Fperformances%2Fcomponents%2FGamingLineChart.tsx",
    "contents_url": "https://api.github.com/repos/Tfe-VirtuoPiano/www/contents/virtuo-piano%2Fsrc%2Ffeatures%2Fperformances%2Fcomponents%2FGamingLineChart.tsx?ref=f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33",
    "patch": "@@ -0,0 +1,128 @@\n+import { IconTrophy } from '@tabler/icons-react';\n+import MultiAxisLineChart from '../../../components/charts/MultiAxisLineChart';\n+import ChartSummary from '../../../components/charts/ChartSummary';\n+import { defaultIntervalOptions } from '../utils/chartUtils';\n+import {\n+  useInvalidatePracticeCache,\n+  usePrefetchGamingLineChartData,\n+  useSongGamingLineChartData,\n+} from '@/customHooks/useSongPerformances';\n+import { useEffect, useState } from 'react';\n+\n+export default function GamingLineChart({ songId }: { songId: string }) {\n+  const [scoreInterval, setScoreInterval] = useState(15);\n+  const [scoreIndex, setScoreIndex] = useState(0);\n+\n+  const scoreLines = [\n+    { dataKey: 'score', color: '#6366f1', name: 'Score', yAxisId: 'score' },\n+    {\n+      dataKey: 'combo',\n+      color: '#f59e0b',\n+      name: 'Combo max',\n+      yAxisId: 'combo',\n+      strokeDasharray: '10 5',\n+    },\n+    {\n+      dataKey: 'multi',\n+      color: '#10b981',\n+      name: 'Multiplicateur max',\n+      yAxisId: 'multi',\n+      strokeDasharray: '5 5',\n+    },\n+  ];\n+\n+  const {\n+    data: gamingLineChartResult,\n+    isLoading: gamingLineChartLoading,\n+    error: gamingLineChartError,\n+  } = useSongGamingLineChartData(songId, scoreIndex, scoreInterval);\n+\n+  const { prefetchAdjacent } = usePrefetchGamingLineChartData(\n+    songId,\n+    scoreInterval,\n+    scoreIndex\n+  );\n+\n+  const { invalidateGamingLineChartDataOnly } = useInvalidatePracticeCache();\n+\n+  useEffect(() => {\n+    prefetchAdjacent();\n+  }, [songId, scoreInterval, scoreIndex, prefetchAdjacent]);\n+\n+  // Gestion des changements d'intervalle et d'index\n+  const handleIntervalChange = (newInterval: number) => {\n+    setScoreInterval(newInterval);\n+    setScoreIndex(0); // Reset à l'index 0 pour le nouvel intervalle\n+    invalidateGamingLineChartDataOnly(songId);\n+  };\n+\n+  const handleIndexChange = (newIndex: number) => {\n+    setScoreIndex(newIndex);\n+  };\n+  const gamingLineChartData = gamingLineChartResult?.data?.data || [];\n+  const totalSessions = gamingLineChartResult?.data?.totalSessions || 0;\n+  const avgScore = gamingLineChartResult?.data?.averageScore || 0;\n+  const avgCombo = gamingLineChartResult?.data?.averageCombo || 0;\n+  const avgMulti = gamingLineChartResult?.data?.averageMulti || 0;\n+\n+  const scoreAxisDomain = [\n+    Math.min(...gamingLineChartData.map((point) => point.score)),\n+    Math.max(...gamingLineChartData.map((point) => point.score)),\n+  ];\n+\n+  const comboAxisDomain = [\n+    Math.min(...gamingLineChartData.map((point) => point.combo)),\n+    Math.max(...gamingLineChartData.map((point) => point.combo)),\n+  ];\n+\n+  const multiAxisDomain = [\n+    Math.min(...gamingLineChartData.map((point) => point.multi)),\n+    Math.max(...gamingLineChartData.map((point) => point.multi)),\n+  ];\n+\n+  return (\n+    <div className=\"col-span-12 lg:col-span-6\">\n+      <MultiAxisLineChart\n+        scoreAxisDomain={scoreAxisDomain}\n+        comboAxisDomain={comboAxisDomain}\n+        multiAxisDomain={multiAxisDomain}\n+        isLoading={gamingLineChartLoading}\n+        error={gamingLineChartError}\n+        title=\"Score par session\"\n+        icon={<IconTrophy size={20} className=\"mr-2 text-yellow-400\" />}\n+        data={gamingLineChartData}\n+        lines={scoreLines}\n+        interval={scoreInterval}\n+        index={scoreIndex}\n+        onIntervalChange={handleIntervalChange}\n+        onIndexChange={handleIndexChange}\n+        maxDataLength={totalSessions}\n+        height={280}\n+        themeColor=\"text-yellow-400\"\n+        intervalOptions={defaultIntervalOptions}\n+        summary={\n+          <ChartSummary\n+            title=\"Moyennes sur la période\"\n+            items={[\n+              {\n+                label: 'Score',\n+                value: avgScore,\n+                color: 'text-indigo-600 dark:text-indigo-400',\n+              },\n+              {\n+                label: 'Combo',\n+                value: avgCombo,\n+                color: 'text-amber-500 dark:text-amber-400',\n+              },\n+              {\n+                label: 'Multiplicateur',\n+                value: `x${avgMulti}`,\n+                color: 'text-green-500 dark:text-green-400',\n+              },\n+            ]}\n+          />\n+        }\n+      />\n+    </div>\n+  );\n+}"
  },
  {
    "sha": "359e7091c65d6086ca27415250a622ed10b3362a",
    "filename": "virtuo-piano/src/features/performances/components/GamingTiles.tsx",
    "status": "added",
    "additions": 130,
    "deletions": 0,
    "changes": 130,
    "blob_url": "https://github.com/Tfe-VirtuoPiano/www/blob/f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33/virtuo-piano%2Fsrc%2Ffeatures%2Fperformances%2Fcomponents%2FGamingTiles.tsx",
    "raw_url": "https://github.com/Tfe-VirtuoPiano/www/raw/f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33/virtuo-piano%2Fsrc%2Ffeatures%2Fperformances%2Fcomponents%2FGamingTiles.tsx",
    "contents_url": "https://api.github.com/repos/Tfe-VirtuoPiano/www/contents/virtuo-piano%2Fsrc%2Ffeatures%2Fperformances%2Fcomponents%2FGamingTiles.tsx?ref=f3cbc9dfdfccb45945610eb2ba3a5121b2a68b33",
    "patch": "@@ -0,0 +1,130 @@\n+import { Spinner } from '@/components/ui/spinner';\n+import { useSongPlayModeTiles } from '@/customHooks/useSongPerformances';\n+import InfoTile from './InfoTile';\n+import {\n+  IconChartBar,\n+  IconClock,\n+  IconFlame,\n+  IconTrophy,\n+} from '@tabler/icons-react';\n+import { formatDuration } from '@/common/utils/function';\n+\n+export default function GamingTiles({ songId }: { songId: string }) {\n+  const {\n+    data: gamingTilesResult,\n+    isLoading: gamingTilesLoading,\n+    error: gamingTilesError,\n+  } = useSongPlayModeTiles(songId);\n+  return (\n+    <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4 mb-8\">\n+      <InfoTile\n+        icon={\n+          gamingTilesLoading ? (\n+            <Spinner variant=\"bars\" size={20} className=\"text-white\" />\n+          ) : (\n+            <IconClock size={20} className=\"text-blue-500\" />\n+          )\n+        }\n+        value={\n+          gamingTilesLoading\n+            ? ''\n+            : gamingTilesError\n+            ? 'Erreur'\n+            : `${gamingTilesResult?.data?.totalSessions || '0'}`\n+        }\n+        label=\"Sessions\"\n+      />\n+      <InfoTile\n+        icon={\n+          gamingTilesLoading ? (\n+            <Spinner variant=\"bars\" size={20} className=\"text-white\" />\n+          ) : (\n+            <IconChartBar size={20} className=\"text-green-500\" />\n+          )\n+        }\n+        value={\n+          gamingTilesLoading\n+            ? ''\n+            : gamingTilesError\n+            ? 'Erreur'\n+            : `${gamingTilesResult?.data?.averageScore || 0}`\n+        }\n+        label=\"Score Moyen\"\n+      />\n+      <InfoTile\n+        icon={\n+          gamingTilesLoading ? (\n+            <Spinner variant=\"bars\" size={20} className=\"text-white\" />\n+          ) : (\n+            <IconTrophy size={20} className=\"text-yellow-500\" />\n+          )\n+        }\n+        value={\n+          gamingTilesLoading\n+            ? ''\n+            : gamingTilesError\n+            ? 'Erreur'\n+            : `${gamingTilesResult?.data?.bestScore || 0}`\n+        }\n+        label=\"Meilleur Score\"\n+      />\n+      <InfoTile\n+        icon={\n+          gamingTilesLoading ? (\n+            <Spinner variant=\"bars\" size={20} className=\"text-white\" />\n+          ) : (\n+            <IconClock size={20} className=\"text-purple-500\" />\n+          )\n+        }\n+        value={\n+          gamingTilesLoading\n+            ? ''\n+            : gamingTilesError\n+            ? 'Erreur'\n+            : formatDuration(\n+                gamingTilesResult?.data?.totalTimeInMinutes || 0,\n+                true\n+              )\n+        }\n+        label=\"Temps total\"\n+      />\n+      <InfoTile\n+        icon={\n+          gamingTilesLoading ? (\n+            <Spinner variant=\"bars\" size={20} className=\"text-white\" />\n+          ) : (\n+            <IconFlame size={20} className=\"text-orange-500\" />\n+          )\n+        }\n+        value={\n+          gamingTilesLoading\n+            ? ''\n+            : gamingTilesError\n+            ? 'Erreur'\n+            : formatDuration(\n+                gamingTilesResult?.data?.longestSessionInMinutes || 0,\n+                true\n+              )\n+        }\n+        label=\"Plus longue session\"\n+      />\n+      <InfoTile\n+        icon={\n+          gamingTilesLoading ? (\n+            <Spinner variant=\"bars\" size={20} className=\"text-white\" />\n+          ) : (\n+            <IconFlame size={20} className=\"text-red-500\" />\n+          )\n+        }\n+        value={\n+          gamingTilesLoading\n+            ? ''\n+            : gamingTilesError\n+            ? 'Erreur'\n+            : `${gamingTilesResult?.data?.currentStreak || 0} jours`\n+        }\n+        label=\"Streak\"\n+      />\n+    </div>\n+  );\n+}"
  }
]
